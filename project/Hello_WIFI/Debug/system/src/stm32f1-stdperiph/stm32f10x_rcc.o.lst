   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"stm32f10x_rcc.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.RCC_DeInit,"ax",%progbits
  16              		.align	1
  17              		.global	RCC_DeInit
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	RCC_DeInit:
  24              	.LFB63:
  25              		.file 1 "../system/src/stm32f1-stdperiph/stm32f10x_rcc.c"
   1:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /**
   2:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   ******************************************************************************
   3:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @file    stm32f10x_rcc.c
   4:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @author  MCD Application Team
   5:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @version V3.5.0
   6:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @date    11-March-2011
   7:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @brief   This file provides all the RCC firmware functions.
   8:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   ******************************************************************************
   9:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @attention
  10:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *
  11:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  12:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  13:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  14:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  15:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  16:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  17:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *
  18:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
  19:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   ******************************************************************************
  20:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   */
  21:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
  22:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /* Includes ------------------------------------------------------------------*/
  23:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #include "stm32f10x_rcc.h"
  24:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
  25:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /** @addtogroup STM32F10x_StdPeriph_Driver
  26:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @{
  27:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   */
  28:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
  29:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /** @defgroup RCC 
  30:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @brief RCC driver modules
  31:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @{
  32:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   */ 
  33:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
  34:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /** @defgroup RCC_Private_TypesDefinitions
  35:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @{
  36:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   */
  37:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
  38:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /**
  39:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @}
  40:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   */
  41:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
  42:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /** @defgroup RCC_Private_Defines
  43:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @{
  44:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   */
  45:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
  46:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /* ------------ RCC registers bit address in the alias region ----------- */
  47:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #define RCC_OFFSET                (RCC_BASE - PERIPH_BASE)
  48:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
  49:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /* --- CR Register ---*/
  50:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
  51:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /* Alias word address of HSION bit */
  52:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #define CR_OFFSET                 (RCC_OFFSET + 0x00)
  53:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #define HSION_BitNumber           0x00
  54:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #define CR_HSION_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (HSION_BitNumber * 4))
  55:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
  56:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /* Alias word address of PLLON bit */
  57:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #define PLLON_BitNumber           0x18
  58:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #define CR_PLLON_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PLLON_BitNumber * 4))
  59:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
  60:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #ifdef STM32F10X_CL
  61:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****  /* Alias word address of PLL2ON bit */
  62:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****  #define PLL2ON_BitNumber          0x1A
  63:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****  #define CR_PLL2ON_BB              (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PLL2ON_BitNumber * 4))
  64:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
  65:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****  /* Alias word address of PLL3ON bit */
  66:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****  #define PLL3ON_BitNumber          0x1C
  67:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****  #define CR_PLL3ON_BB              (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PLL3ON_BitNumber * 4))
  68:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */ 
  69:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
  70:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /* Alias word address of CSSON bit */
  71:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #define CSSON_BitNumber           0x13
  72:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #define CR_CSSON_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (CSSON_BitNumber * 4))
  73:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
  74:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /* --- CFGR Register ---*/
  75:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
  76:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /* Alias word address of USBPRE bit */
  77:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #define CFGR_OFFSET               (RCC_OFFSET + 0x04)
  78:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
  79:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #ifndef STM32F10X_CL
  80:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****  #define USBPRE_BitNumber          0x16
  81:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****  #define CFGR_USBPRE_BB            (PERIPH_BB_BASE + (CFGR_OFFSET * 32) + (USBPRE_BitNumber * 4))
  82:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #else
  83:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****  #define OTGFSPRE_BitNumber        0x16
  84:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****  #define CFGR_OTGFSPRE_BB          (PERIPH_BB_BASE + (CFGR_OFFSET * 32) + (OTGFSPRE_BitNumber * 4))
  85:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */ 
  86:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
  87:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /* --- BDCR Register ---*/
  88:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
  89:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /* Alias word address of RTCEN bit */
  90:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #define BDCR_OFFSET               (RCC_OFFSET + 0x20)
  91:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #define RTCEN_BitNumber           0x0F
  92:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #define BDCR_RTCEN_BB             (PERIPH_BB_BASE + (BDCR_OFFSET * 32) + (RTCEN_BitNumber * 4))
  93:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
  94:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /* Alias word address of BDRST bit */
  95:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #define BDRST_BitNumber           0x10
  96:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #define BDCR_BDRST_BB             (PERIPH_BB_BASE + (BDCR_OFFSET * 32) + (BDRST_BitNumber * 4))
  97:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
  98:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /* --- CSR Register ---*/
  99:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 100:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /* Alias word address of LSION bit */
 101:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #define CSR_OFFSET                (RCC_OFFSET + 0x24)
 102:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #define LSION_BitNumber           0x00
 103:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #define CSR_LSION_BB              (PERIPH_BB_BASE + (CSR_OFFSET * 32) + (LSION_BitNumber * 4))
 104:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 105:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #ifdef STM32F10X_CL
 106:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /* --- CFGR2 Register ---*/
 107:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 108:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****  /* Alias word address of I2S2SRC bit */
 109:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****  #define CFGR2_OFFSET              (RCC_OFFSET + 0x2C)
 110:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****  #define I2S2SRC_BitNumber         0x11
 111:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****  #define CFGR2_I2S2SRC_BB          (PERIPH_BB_BASE + (CFGR2_OFFSET * 32) + (I2S2SRC_BitNumber * 4))
 112:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 113:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****  /* Alias word address of I2S3SRC bit */
 114:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****  #define I2S3SRC_BitNumber         0x12
 115:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****  #define CFGR2_I2S3SRC_BB          (PERIPH_BB_BASE + (CFGR2_OFFSET * 32) + (I2S3SRC_BitNumber * 4))
 116:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */
 117:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 118:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /* ---------------------- RCC registers bit mask ------------------------ */
 119:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 120:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /* CR register bit mask */
 121:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #define CR_HSEBYP_Reset           ((uint32_t)0xFFFBFFFF)
 122:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #define CR_HSEBYP_Set             ((uint32_t)0x00040000)
 123:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #define CR_HSEON_Reset            ((uint32_t)0xFFFEFFFF)
 124:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #define CR_HSEON_Set              ((uint32_t)0x00010000)
 125:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #define CR_HSITRIM_Mask           ((uint32_t)0xFFFFFF07)
 126:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 127:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /* CFGR register bit mask */
 128:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL) || defined 
 129:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****  #define CFGR_PLL_Mask            ((uint32_t)0xFFC2FFFF)
 130:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #else
 131:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****  #define CFGR_PLL_Mask            ((uint32_t)0xFFC0FFFF)
 132:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */ 
 133:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 134:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #define CFGR_PLLMull_Mask         ((uint32_t)0x003C0000)
 135:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #define CFGR_PLLSRC_Mask          ((uint32_t)0x00010000)
 136:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #define CFGR_PLLXTPRE_Mask        ((uint32_t)0x00020000)
 137:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #define CFGR_SWS_Mask             ((uint32_t)0x0000000C)
 138:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #define CFGR_SW_Mask              ((uint32_t)0xFFFFFFFC)
 139:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #define CFGR_HPRE_Reset_Mask      ((uint32_t)0xFFFFFF0F)
 140:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #define CFGR_HPRE_Set_Mask        ((uint32_t)0x000000F0)
 141:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #define CFGR_PPRE1_Reset_Mask     ((uint32_t)0xFFFFF8FF)
 142:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #define CFGR_PPRE1_Set_Mask       ((uint32_t)0x00000700)
 143:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #define CFGR_PPRE2_Reset_Mask     ((uint32_t)0xFFFFC7FF)
 144:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #define CFGR_PPRE2_Set_Mask       ((uint32_t)0x00003800)
 145:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #define CFGR_ADCPRE_Reset_Mask    ((uint32_t)0xFFFF3FFF)
 146:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #define CFGR_ADCPRE_Set_Mask      ((uint32_t)0x0000C000)
 147:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 148:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /* CSR register bit mask */
 149:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #define CSR_RMVF_Set              ((uint32_t)0x01000000)
 150:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 151:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL) || defined 
 152:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /* CFGR2 register bit mask */
 153:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****  #define CFGR2_PREDIV1SRC         ((uint32_t)0x00010000)
 154:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****  #define CFGR2_PREDIV1            ((uint32_t)0x0000000F)
 155:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #endif
 156:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #ifdef STM32F10X_CL
 157:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****  #define CFGR2_PREDIV2            ((uint32_t)0x000000F0)
 158:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****  #define CFGR2_PLL2MUL            ((uint32_t)0x00000F00)
 159:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****  #define CFGR2_PLL3MUL            ((uint32_t)0x0000F000)
 160:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */ 
 161:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 162:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /* RCC Flag Mask */
 163:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #define FLAG_Mask                 ((uint8_t)0x1F)
 164:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 165:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /* CIR register byte 2 (Bits[15:8]) base address */
 166:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #define CIR_BYTE2_ADDRESS         ((uint32_t)0x40021009)
 167:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 168:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /* CIR register byte 3 (Bits[23:16]) base address */
 169:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #define CIR_BYTE3_ADDRESS         ((uint32_t)0x4002100A)
 170:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 171:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /* CFGR register byte 4 (Bits[31:24]) base address */
 172:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #define CFGR_BYTE4_ADDRESS        ((uint32_t)0x40021007)
 173:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 174:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /* BDCR register base address */
 175:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #define BDCR_ADDRESS              (PERIPH_BASE + BDCR_OFFSET)
 176:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 177:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /**
 178:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @}
 179:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   */ 
 180:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 181:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /** @defgroup RCC_Private_Macros
 182:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @{
 183:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   */ 
 184:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 185:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /**
 186:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @}
 187:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   */ 
 188:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 189:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /** @defgroup RCC_Private_Variables
 190:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @{
 191:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   */ 
 192:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 193:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** static __I uint8_t APBAHBPrescTable[16] = {0, 0, 0, 0, 1, 2, 3, 4, 1, 2, 3, 4, 6, 7, 8, 9};
 194:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** static __I uint8_t ADCPrescTable[4] = {2, 4, 6, 8};
 195:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 196:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /**
 197:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @}
 198:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   */
 199:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 200:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /** @defgroup RCC_Private_FunctionPrototypes
 201:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @{
 202:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   */
 203:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 204:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /**
 205:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @}
 206:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   */
 207:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 208:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /** @defgroup RCC_Private_Functions
 209:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @{
 210:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   */
 211:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 212:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /**
 213:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @brief  Resets the RCC clock configuration to the default reset state.
 214:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @param  None
 215:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @retval None
 216:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   */
 217:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** void RCC_DeInit(void)
 218:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** {
  26              		.loc 1 218 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
 219:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Set HSION bit */
 220:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   RCC->CR |= (uint32_t)0x00000001;
  31              		.loc 1 220 0
  32 0000 0D4B     		ldr	r3, .L2
  33 0002 1A68     		ldr	r2, [r3]
  34 0004 42F00102 		orr	r2, r2, #1
  35 0008 1A60     		str	r2, [r3]
 221:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 222:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
 223:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #ifndef STM32F10X_CL
 224:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   RCC->CFGR &= (uint32_t)0xF8FF0000;
  36              		.loc 1 224 0
  37 000a 5968     		ldr	r1, [r3, #4]
  38 000c 0B4A     		ldr	r2, .L2+4
  39 000e 0A40     		ands	r2, r2, r1
  40 0010 5A60     		str	r2, [r3, #4]
 225:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #else
 226:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   RCC->CFGR &= (uint32_t)0xF0FF0000;
 227:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */   
 228:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   
 229:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Reset HSEON, CSSON and PLLON bits */
 230:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   RCC->CR &= (uint32_t)0xFEF6FFFF;
  41              		.loc 1 230 0
  42 0012 1A68     		ldr	r2, [r3]
  43 0014 22F08472 		bic	r2, r2, #17301504
  44 0018 22F48032 		bic	r2, r2, #65536
  45 001c 1A60     		str	r2, [r3]
 231:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 232:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Reset HSEBYP bit */
 233:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   RCC->CR &= (uint32_t)0xFFFBFFFF;
  46              		.loc 1 233 0
  47 001e 1A68     		ldr	r2, [r3]
  48 0020 22F48022 		bic	r2, r2, #262144
  49 0024 1A60     		str	r2, [r3]
 234:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 235:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
 236:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   RCC->CFGR &= (uint32_t)0xFF80FFFF;
  50              		.loc 1 236 0
  51 0026 5A68     		ldr	r2, [r3, #4]
  52 0028 22F4FE02 		bic	r2, r2, #8323072
  53 002c 5A60     		str	r2, [r3, #4]
 237:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 238:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #ifdef STM32F10X_CL
 239:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Reset PLL2ON and PLL3ON bits */
 240:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   RCC->CR &= (uint32_t)0xEBFFFFFF;
 241:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 242:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Disable all interrupts and clear pending bits  */
 243:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   RCC->CIR = 0x00FF0000;
 244:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 245:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Reset CFGR2 register */
 246:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   RCC->CFGR2 = 0x00000000;
 247:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #elif defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
 248:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Disable all interrupts and clear pending bits  */
 249:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   RCC->CIR = 0x009F0000;
 250:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 251:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Reset CFGR2 register */
 252:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   RCC->CFGR2 = 0x00000000;      
 253:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #else
 254:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Disable all interrupts and clear pending bits  */
 255:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   RCC->CIR = 0x009F0000;
  54              		.loc 1 255 0
  55 002e 4FF41F02 		mov	r2, #10420224
  56 0032 9A60     		str	r2, [r3, #8]
 256:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */
 257:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 258:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** }
  57              		.loc 1 258 0
  58 0034 7047     		bx	lr
  59              	.L3:
  60 0036 00BF     		.align	2
  61              	.L2:
  62 0038 00100240 		.word	1073876992
  63 003c 0000FFF8 		.word	-117506048
  64              		.cfi_endproc
  65              	.LFE63:
  67              		.section	.text.RCC_HSEConfig,"ax",%progbits
  68              		.align	1
  69              		.global	RCC_HSEConfig
  70              		.syntax unified
  71              		.thumb
  72              		.thumb_func
  73              		.fpu softvfp
  75              	RCC_HSEConfig:
  76              	.LFB64:
 259:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 260:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /**
 261:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @brief  Configures the External High Speed oscillator (HSE).
 262:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @note   HSE can not be stopped if it is used directly or through the PLL as system clock.
 263:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @param  RCC_HSE: specifies the new state of the HSE.
 264:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 265:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_HSE_OFF: HSE oscillator OFF
 266:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_HSE_ON: HSE oscillator ON
 267:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
 268:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @retval None
 269:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   */
 270:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** void RCC_HSEConfig(uint32_t RCC_HSE)
 271:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** {
  77              		.loc 1 271 0
  78              		.cfi_startproc
  79              		@ args = 0, pretend = 0, frame = 0
  80              		@ frame_needed = 0, uses_anonymous_args = 0
  81              	.LVL0:
  82 0000 10B5     		push	{r4, lr}
  83              		.cfi_def_cfa_offset 8
  84              		.cfi_offset 4, -8
  85              		.cfi_offset 14, -4
 272:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Check the parameters */
 273:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   assert_param(IS_RCC_HSE(RCC_HSE));
  86              		.loc 1 273 0
  87 0002 0446     		mov	r4, r0
  88 0004 28B1     		cbz	r0, .L5
  89              		.loc 1 273 0 is_stmt 0 discriminator 1
  90 0006 B0F5803F 		cmp	r0, #65536
  91 000a 02D0     		beq	.L5
  92              		.loc 1 273 0 discriminator 2
  93 000c B0F5802F 		cmp	r0, #262144
  94 0010 0FD1     		bne	.L10
  95              	.LVL1:
  96              	.L5:
 274:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
 275:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Reset HSEON bit */
 276:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   RCC->CR &= CR_HSEON_Reset;
  97              		.loc 1 276 0 is_stmt 1
  98 0012 114B     		ldr	r3, .L11
  99 0014 1A68     		ldr	r2, [r3]
 100 0016 22F48032 		bic	r2, r2, #65536
 101 001a 1A60     		str	r2, [r3]
 277:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Reset HSEBYP bit */
 278:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   RCC->CR &= CR_HSEBYP_Reset;
 102              		.loc 1 278 0
 103 001c 1A68     		ldr	r2, [r3]
 104 001e 22F48022 		bic	r2, r2, #262144
 105 0022 1A60     		str	r2, [r3]
 279:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
 280:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   switch(RCC_HSE)
 106              		.loc 1 280 0
 107 0024 B4F5803F 		cmp	r4, #65536
 108 0028 09D0     		beq	.L7
 109 002a B4F5802F 		cmp	r4, #262144
 110 002e 0CD0     		beq	.L8
 111              	.L4:
 281:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   {
 282:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****     case RCC_HSE_ON:
 283:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****       /* Set HSEON bit */
 284:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****       RCC->CR |= CR_HSEON_Set;
 285:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****       break;
 286:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****       
 287:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****     case RCC_HSE_Bypass:
 288:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****       /* Set HSEBYP and HSEON bits */
 289:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****       RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
 290:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****       break;
 291:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****       
 292:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****     default:
 293:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****       break;
 294:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   }
 295:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** }
 112              		.loc 1 295 0
 113 0030 10BD     		pop	{r4, pc}
 114              	.LVL2:
 115              	.L10:
 273:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
 116              		.loc 1 273 0 discriminator 3
 117 0032 40F21111 		movw	r1, #273
 118 0036 0948     		ldr	r0, .L11+4
 119              	.LVL3:
 120 0038 FFF7FEFF 		bl	assert_failed
 121              	.LVL4:
 122 003c E9E7     		b	.L5
 123              	.L7:
 284:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****       break;
 124              		.loc 1 284 0
 125 003e 064A     		ldr	r2, .L11
 126 0040 1368     		ldr	r3, [r2]
 127 0042 43F48033 		orr	r3, r3, #65536
 128 0046 1360     		str	r3, [r2]
 285:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****       
 129              		.loc 1 285 0
 130 0048 F2E7     		b	.L4
 131              	.L8:
 289:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****       break;
 132              		.loc 1 289 0
 133 004a 034A     		ldr	r2, .L11
 134 004c 1368     		ldr	r3, [r2]
 135 004e 43F4A023 		orr	r3, r3, #327680
 136 0052 1360     		str	r3, [r2]
 137              		.loc 1 295 0
 138 0054 ECE7     		b	.L4
 139              	.L12:
 140 0056 00BF     		.align	2
 141              	.L11:
 142 0058 00100240 		.word	1073876992
 143 005c 00000000 		.word	.LC0
 144              		.cfi_endproc
 145              	.LFE64:
 147              		.section	.text.RCC_AdjustHSICalibrationValue,"ax",%progbits
 148              		.align	1
 149              		.global	RCC_AdjustHSICalibrationValue
 150              		.syntax unified
 151              		.thumb
 152              		.thumb_func
 153              		.fpu softvfp
 155              	RCC_AdjustHSICalibrationValue:
 156              	.LFB66:
 296:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 297:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /**
 298:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @brief  Waits for HSE start-up.
 299:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @param  None
 300:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @retval An ErrorStatus enumuration value:
 301:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * - SUCCESS: HSE oscillator is stable and ready to use
 302:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * - ERROR: HSE oscillator not yet ready
 303:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   */
 304:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** ErrorStatus RCC_WaitForHSEStartUp(void)
 305:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** {
 306:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   __IO uint32_t StartUpCounter = 0;
 307:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   ErrorStatus status = ERROR;
 308:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   FlagStatus HSEStatus = RESET;
 309:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   
 310:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Wait till HSE is ready and if Time out is reached exit */
 311:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   do
 312:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   {
 313:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****     HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 314:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****     StartUpCounter++;  
 315:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
 316:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   
 317:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 318:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   {
 319:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****     status = SUCCESS;
 320:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   }
 321:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   else
 322:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   {
 323:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****     status = ERROR;
 324:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   }  
 325:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   return (status);
 326:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** }
 327:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 328:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /**
 329:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @brief  Adjusts the Internal High Speed oscillator (HSI) calibration value.
 330:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @param  HSICalibrationValue: specifies the calibration trimming value.
 331:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   This parameter must be a number between 0 and 0x1F.
 332:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @retval None
 333:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   */
 334:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
 335:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** {
 157              		.loc 1 335 0
 158              		.cfi_startproc
 159              		@ args = 0, pretend = 0, frame = 0
 160              		@ frame_needed = 0, uses_anonymous_args = 0
 161              	.LVL5:
 162 0000 10B5     		push	{r4, lr}
 163              		.cfi_def_cfa_offset 8
 164              		.cfi_offset 4, -8
 165              		.cfi_offset 14, -4
 166 0002 0446     		mov	r4, r0
 167              	.LVL6:
 336:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 337:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Check the parameters */
 338:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
 168              		.loc 1 338 0
 169 0004 1F28     		cmp	r0, #31
 170 0006 07D8     		bhi	.L16
 171              	.LVL7:
 172              	.L14:
 339:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   tmpreg = RCC->CR;
 173              		.loc 1 339 0
 174 0008 064B     		ldr	r3, .L17
 175 000a 1868     		ldr	r0, [r3]
 176              	.LVL8:
 340:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Clear HSITRIM[4:0] bits */
 341:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   tmpreg &= CR_HSITRIM_Mask;
 177              		.loc 1 341 0
 178 000c 20F0F800 		bic	r0, r0, #248
 179              	.LVL9:
 342:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
 343:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   tmpreg |= (uint32_t)HSICalibrationValue << 3;
 180              		.loc 1 343 0
 181 0010 40EAC400 		orr	r0, r0, r4, lsl #3
 182              	.LVL10:
 344:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Store the new value */
 345:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   RCC->CR = tmpreg;
 183              		.loc 1 345 0
 184 0014 1860     		str	r0, [r3]
 346:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** }
 185              		.loc 1 346 0
 186 0016 10BD     		pop	{r4, pc}
 187              	.LVL11:
 188              	.L16:
 338:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   tmpreg = RCC->CR;
 189              		.loc 1 338 0 discriminator 1
 190 0018 4FF4A971 		mov	r1, #338
 191 001c 0248     		ldr	r0, .L17+4
 192              	.LVL12:
 193 001e FFF7FEFF 		bl	assert_failed
 194              	.LVL13:
 195 0022 F1E7     		b	.L14
 196              	.L18:
 197              		.align	2
 198              	.L17:
 199 0024 00100240 		.word	1073876992
 200 0028 00000000 		.word	.LC0
 201              		.cfi_endproc
 202              	.LFE66:
 204              		.section	.text.RCC_HSICmd,"ax",%progbits
 205              		.align	1
 206              		.global	RCC_HSICmd
 207              		.syntax unified
 208              		.thumb
 209              		.thumb_func
 210              		.fpu softvfp
 212              	RCC_HSICmd:
 213              	.LFB67:
 347:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 348:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /**
 349:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @brief  Enables or disables the Internal High Speed oscillator (HSI).
 350:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @note   HSI can not be stopped if it is used directly or through the PLL as system clock.
 351:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @param  NewState: new state of the HSI. This parameter can be: ENABLE or DISABLE.
 352:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @retval None
 353:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   */
 354:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** void RCC_HSICmd(FunctionalState NewState)
 355:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** {
 214              		.loc 1 355 0
 215              		.cfi_startproc
 216              		@ args = 0, pretend = 0, frame = 0
 217              		@ frame_needed = 0, uses_anonymous_args = 0
 218              	.LVL14:
 219 0000 10B5     		push	{r4, lr}
 220              		.cfi_def_cfa_offset 8
 221              		.cfi_offset 4, -8
 222              		.cfi_offset 14, -4
 223 0002 0446     		mov	r4, r0
 356:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Check the parameters */
 357:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 224              		.loc 1 357 0
 225 0004 0128     		cmp	r0, #1
 226 0006 04D9     		bls	.L20
 227              		.loc 1 357 0 is_stmt 0 discriminator 1
 228 0008 40F26511 		movw	r1, #357
 229 000c 0248     		ldr	r0, .L22
 230              	.LVL15:
 231 000e FFF7FEFF 		bl	assert_failed
 232              	.LVL16:
 233              	.L20:
 358:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 234              		.loc 1 358 0 is_stmt 1
 235 0012 024B     		ldr	r3, .L22+4
 236 0014 1C60     		str	r4, [r3]
 359:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** }
 237              		.loc 1 359 0
 238 0016 10BD     		pop	{r4, pc}
 239              	.L23:
 240              		.align	2
 241              	.L22:
 242 0018 00000000 		.word	.LC0
 243 001c 00004242 		.word	1111621632
 244              		.cfi_endproc
 245              	.LFE67:
 247              		.section	.text.RCC_PLLConfig,"ax",%progbits
 248              		.align	1
 249              		.global	RCC_PLLConfig
 250              		.syntax unified
 251              		.thumb
 252              		.thumb_func
 253              		.fpu softvfp
 255              	RCC_PLLConfig:
 256              	.LFB68:
 360:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 361:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /**
 362:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @brief  Configures the PLL clock source and multiplication factor.
 363:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @note   This function must be used only when the PLL is disabled.
 364:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @param  RCC_PLLSource: specifies the PLL entry clock source.
 365:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   For @b STM32_Connectivity_line_devices or @b STM32_Value_line_devices, 
 366:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   this parameter can be one of the following values:
 367:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_PLLSource_HSI_Div2: HSI oscillator clock divided by 2 selected as PLL clock entry
 368:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_PLLSource_PREDIV1: PREDIV1 clock selected as PLL clock entry
 369:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   For @b other_STM32_devices, this parameter can be one of the following values:
 370:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_PLLSource_HSI_Div2: HSI oscillator clock divided by 2 selected as PLL clock entry
 371:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_PLLSource_HSE_Div1: HSE oscillator clock selected as PLL clock entry
 372:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_PLLSource_HSE_Div2: HSE oscillator clock divided by 2 selected as PLL clock entry 
 373:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @param  RCC_PLLMul: specifies the PLL multiplication factor.
 374:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   For @b STM32_Connectivity_line_devices, this parameter can be RCC_PLLMul_x where x:{[4,9], 6_
 375:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   For @b other_STM32_devices, this parameter can be RCC_PLLMul_x where x:[2,16]  
 376:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @retval None
 377:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   */
 378:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
 379:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** {
 257              		.loc 1 379 0
 258              		.cfi_startproc
 259              		@ args = 0, pretend = 0, frame = 0
 260              		@ frame_needed = 0, uses_anonymous_args = 0
 261              	.LVL17:
 262 0000 38B5     		push	{r3, r4, r5, lr}
 263              		.cfi_def_cfa_offset 16
 264              		.cfi_offset 3, -16
 265              		.cfi_offset 4, -12
 266              		.cfi_offset 5, -8
 267              		.cfi_offset 14, -4
 268 0002 0D46     		mov	r5, r1
 269              	.LVL18:
 380:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 381:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 382:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Check the parameters */
 383:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
 270              		.loc 1 383 0
 271 0004 0446     		mov	r4, r0
 272 0006 28B1     		cbz	r0, .L25
 273              		.loc 1 383 0 is_stmt 0 discriminator 1
 274 0008 B0F5803F 		cmp	r0, #65536
 275 000c 02D0     		beq	.L25
 276              		.loc 1 383 0 discriminator 2
 277 000e B0F5403F 		cmp	r0, #196608
 278 0012 37D1     		bne	.L28
 279              	.LVL19:
 280              	.L25:
 384:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));
 281              		.loc 1 384 0 is_stmt 1
 282 0014 75B3     		cbz	r5, .L26
 283              		.loc 1 384 0 is_stmt 0 discriminator 1
 284 0016 B5F5802F 		cmp	r5, #262144
 285 001a 2BD0     		beq	.L26
 286              		.loc 1 384 0 discriminator 2
 287 001c B5F5002F 		cmp	r5, #524288
 288 0020 28D0     		beq	.L26
 289              		.loc 1 384 0 discriminator 3
 290 0022 B5F5402F 		cmp	r5, #786432
 291 0026 25D0     		beq	.L26
 292              		.loc 1 384 0 discriminator 4
 293 0028 B5F5801F 		cmp	r5, #1048576
 294 002c 22D0     		beq	.L26
 295              		.loc 1 384 0 discriminator 5
 296 002e B5F5A01F 		cmp	r5, #1310720
 297 0032 1FD0     		beq	.L26
 298              		.loc 1 384 0 discriminator 6
 299 0034 B5F5C01F 		cmp	r5, #1572864
 300 0038 1CD0     		beq	.L26
 301              		.loc 1 384 0 discriminator 7
 302 003a B5F5E01F 		cmp	r5, #1835008
 303 003e 19D0     		beq	.L26
 304              		.loc 1 384 0 discriminator 8
 305 0040 B5F5001F 		cmp	r5, #2097152
 306 0044 16D0     		beq	.L26
 307              		.loc 1 384 0 discriminator 9
 308 0046 B5F5101F 		cmp	r5, #2359296
 309 004a 13D0     		beq	.L26
 310              		.loc 1 384 0 discriminator 10
 311 004c B5F5201F 		cmp	r5, #2621440
 312 0050 10D0     		beq	.L26
 313              		.loc 1 384 0 discriminator 11
 314 0052 B5F5301F 		cmp	r5, #2883584
 315 0056 0DD0     		beq	.L26
 316              		.loc 1 384 0 discriminator 12
 317 0058 B5F5401F 		cmp	r5, #3145728
 318 005c 0AD0     		beq	.L26
 319              		.loc 1 384 0 discriminator 13
 320 005e B5F5501F 		cmp	r5, #3407872
 321 0062 07D0     		beq	.L26
 322              		.loc 1 384 0 discriminator 14
 323 0064 B5F5601F 		cmp	r5, #3670016
 324 0068 04D0     		beq	.L26
 325              		.loc 1 384 0 discriminator 15
 326 006a 4FF4C071 		mov	r1, #384
 327 006e 0848     		ldr	r0, .L29
 328 0070 FFF7FEFF 		bl	assert_failed
 329              	.LVL20:
 330              	.L26:
 385:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 386:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR;
 331              		.loc 1 386 0 is_stmt 1
 332 0074 074A     		ldr	r2, .L29+4
 333 0076 5368     		ldr	r3, [r2, #4]
 334              	.LVL21:
 387:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
 388:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   tmpreg &= CFGR_PLL_Mask;
 335              		.loc 1 388 0
 336 0078 23F47C13 		bic	r3, r3, #4128768
 337              	.LVL22:
 389:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Set the PLL configuration bits */
 390:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   tmpreg |= RCC_PLLSource | RCC_PLLMul;
 338              		.loc 1 390 0
 339 007c 2C43     		orrs	r4, r4, r5
 340              	.LVL23:
 341 007e 1C43     		orrs	r4, r4, r3
 342              	.LVL24:
 391:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Store the new value */
 392:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   RCC->CFGR = tmpreg;
 343              		.loc 1 392 0
 344 0080 5460     		str	r4, [r2, #4]
 393:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** }
 345              		.loc 1 393 0
 346 0082 38BD     		pop	{r3, r4, r5, pc}
 347              	.LVL25:
 348              	.L28:
 383:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));
 349              		.loc 1 383 0 discriminator 3
 350 0084 40F27F11 		movw	r1, #383
 351              	.LVL26:
 352 0088 0148     		ldr	r0, .L29
 353              	.LVL27:
 354 008a FFF7FEFF 		bl	assert_failed
 355              	.LVL28:
 356 008e C1E7     		b	.L25
 357              	.L30:
 358              		.align	2
 359              	.L29:
 360 0090 00000000 		.word	.LC0
 361 0094 00100240 		.word	1073876992
 362              		.cfi_endproc
 363              	.LFE68:
 365              		.section	.text.RCC_PLLCmd,"ax",%progbits
 366              		.align	1
 367              		.global	RCC_PLLCmd
 368              		.syntax unified
 369              		.thumb
 370              		.thumb_func
 371              		.fpu softvfp
 373              	RCC_PLLCmd:
 374              	.LFB69:
 394:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 395:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /**
 396:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @brief  Enables or disables the PLL.
 397:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @note   The PLL can not be disabled if it is used as system clock.
 398:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @param  NewState: new state of the PLL. This parameter can be: ENABLE or DISABLE.
 399:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @retval None
 400:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   */
 401:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** void RCC_PLLCmd(FunctionalState NewState)
 402:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** {
 375              		.loc 1 402 0
 376              		.cfi_startproc
 377              		@ args = 0, pretend = 0, frame = 0
 378              		@ frame_needed = 0, uses_anonymous_args = 0
 379              	.LVL29:
 380 0000 10B5     		push	{r4, lr}
 381              		.cfi_def_cfa_offset 8
 382              		.cfi_offset 4, -8
 383              		.cfi_offset 14, -4
 384 0002 0446     		mov	r4, r0
 403:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Check the parameters */
 404:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 385              		.loc 1 404 0
 386 0004 0128     		cmp	r0, #1
 387 0006 04D9     		bls	.L32
 388              		.loc 1 404 0 is_stmt 0 discriminator 1
 389 0008 4FF4CA71 		mov	r1, #404
 390 000c 0248     		ldr	r0, .L34
 391              	.LVL30:
 392 000e FFF7FEFF 		bl	assert_failed
 393              	.LVL31:
 394              	.L32:
 405:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 406:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 395              		.loc 1 406 0 is_stmt 1
 396 0012 024B     		ldr	r3, .L34+4
 397 0014 1C60     		str	r4, [r3]
 407:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** }
 398              		.loc 1 407 0
 399 0016 10BD     		pop	{r4, pc}
 400              	.L35:
 401              		.align	2
 402              	.L34:
 403 0018 00000000 		.word	.LC0
 404 001c 60004242 		.word	1111621728
 405              		.cfi_endproc
 406              	.LFE69:
 408              		.section	.text.RCC_SYSCLKConfig,"ax",%progbits
 409              		.align	1
 410              		.global	RCC_SYSCLKConfig
 411              		.syntax unified
 412              		.thumb
 413              		.thumb_func
 414              		.fpu softvfp
 416              	RCC_SYSCLKConfig:
 417              	.LFB70:
 408:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 409:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL) || defined 
 410:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /**
 411:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @brief  Configures the PREDIV1 division factor.
 412:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @note 
 413:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   - This function must be used only when the PLL is disabled.
 414:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   - This function applies only to STM32 Connectivity line and Value line 
 415:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     devices.
 416:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @param  RCC_PREDIV1_Source: specifies the PREDIV1 clock source.
 417:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 418:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_PREDIV1_Source_HSE: HSE selected as PREDIV1 clock
 419:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_PREDIV1_Source_PLL2: PLL2 selected as PREDIV1 clock
 420:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @note 
 421:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   For @b STM32_Value_line_devices this parameter is always RCC_PREDIV1_Source_HSE  
 422:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @param  RCC_PREDIV1_Div: specifies the PREDIV1 clock division factor.
 423:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   This parameter can be RCC_PREDIV1_Divx where x:[1,16]
 424:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @retval None
 425:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   */
 426:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** void RCC_PREDIV1Config(uint32_t RCC_PREDIV1_Source, uint32_t RCC_PREDIV1_Div)
 427:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** {
 428:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 429:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   
 430:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Check the parameters */
 431:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   assert_param(IS_RCC_PREDIV1_SOURCE(RCC_PREDIV1_Source));
 432:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   assert_param(IS_RCC_PREDIV1(RCC_PREDIV1_Div));
 433:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 434:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR2;
 435:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Clear PREDIV1[3:0] and PREDIV1SRC bits */
 436:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   tmpreg &= ~(CFGR2_PREDIV1 | CFGR2_PREDIV1SRC);
 437:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Set the PREDIV1 clock source and division factor */
 438:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   tmpreg |= RCC_PREDIV1_Source | RCC_PREDIV1_Div ;
 439:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Store the new value */
 440:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   RCC->CFGR2 = tmpreg;
 441:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** }
 442:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #endif
 443:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 444:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #ifdef STM32F10X_CL
 445:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /**
 446:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @brief  Configures the PREDIV2 division factor.
 447:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @note 
 448:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   - This function must be used only when both PLL2 and PLL3 are disabled.
 449:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   - This function applies only to STM32 Connectivity line devices.
 450:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @param  RCC_PREDIV2_Div: specifies the PREDIV2 clock division factor.
 451:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   This parameter can be RCC_PREDIV2_Divx where x:[1,16]
 452:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @retval None
 453:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   */
 454:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** void RCC_PREDIV2Config(uint32_t RCC_PREDIV2_Div)
 455:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** {
 456:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 457:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 458:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Check the parameters */
 459:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   assert_param(IS_RCC_PREDIV2(RCC_PREDIV2_Div));
 460:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 461:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR2;
 462:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Clear PREDIV2[3:0] bits */
 463:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   tmpreg &= ~CFGR2_PREDIV2;
 464:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Set the PREDIV2 division factor */
 465:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   tmpreg |= RCC_PREDIV2_Div;
 466:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Store the new value */
 467:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   RCC->CFGR2 = tmpreg;
 468:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** }
 469:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 470:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /**
 471:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @brief  Configures the PLL2 multiplication factor.
 472:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @note
 473:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   - This function must be used only when the PLL2 is disabled.
 474:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   - This function applies only to STM32 Connectivity line devices.
 475:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @param  RCC_PLL2Mul: specifies the PLL2 multiplication factor.
 476:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   This parameter can be RCC_PLL2Mul_x where x:{[8,14], 16, 20}
 477:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @retval None
 478:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   */
 479:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** void RCC_PLL2Config(uint32_t RCC_PLL2Mul)
 480:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** {
 481:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 482:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 483:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Check the parameters */
 484:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   assert_param(IS_RCC_PLL2_MUL(RCC_PLL2Mul));
 485:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 486:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR2;
 487:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Clear PLL2Mul[3:0] bits */
 488:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   tmpreg &= ~CFGR2_PLL2MUL;
 489:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Set the PLL2 configuration bits */
 490:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   tmpreg |= RCC_PLL2Mul;
 491:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Store the new value */
 492:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   RCC->CFGR2 = tmpreg;
 493:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** }
 494:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 495:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 496:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /**
 497:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @brief  Enables or disables the PLL2.
 498:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @note 
 499:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   - The PLL2 can not be disabled if it is used indirectly as system clock
 500:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     (i.e. it is used as PLL clock entry that is used as System clock).
 501:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   - This function applies only to STM32 Connectivity line devices.
 502:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @param  NewState: new state of the PLL2. This parameter can be: ENABLE or DISABLE.
 503:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @retval None
 504:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   */
 505:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** void RCC_PLL2Cmd(FunctionalState NewState)
 506:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** {
 507:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Check the parameters */
 508:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 509:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 510:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *(__IO uint32_t *) CR_PLL2ON_BB = (uint32_t)NewState;
 511:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** }
 512:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 513:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 514:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /**
 515:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @brief  Configures the PLL3 multiplication factor.
 516:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @note 
 517:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   - This function must be used only when the PLL3 is disabled.
 518:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   - This function applies only to STM32 Connectivity line devices.
 519:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @param  RCC_PLL3Mul: specifies the PLL3 multiplication factor.
 520:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   This parameter can be RCC_PLL3Mul_x where x:{[8,14], 16, 20}
 521:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @retval None
 522:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   */
 523:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** void RCC_PLL3Config(uint32_t RCC_PLL3Mul)
 524:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** {
 525:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 526:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 527:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Check the parameters */
 528:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   assert_param(IS_RCC_PLL3_MUL(RCC_PLL3Mul));
 529:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 530:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR2;
 531:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Clear PLL3Mul[3:0] bits */
 532:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   tmpreg &= ~CFGR2_PLL3MUL;
 533:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Set the PLL3 configuration bits */
 534:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   tmpreg |= RCC_PLL3Mul;
 535:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Store the new value */
 536:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   RCC->CFGR2 = tmpreg;
 537:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** }
 538:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 539:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 540:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /**
 541:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @brief  Enables or disables the PLL3.
 542:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @note   This function applies only to STM32 Connectivity line devices.
 543:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @param  NewState: new state of the PLL3. This parameter can be: ENABLE or DISABLE.
 544:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @retval None
 545:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   */
 546:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** void RCC_PLL3Cmd(FunctionalState NewState)
 547:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** {
 548:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Check the parameters */
 549:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 550:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 551:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *(__IO uint32_t *) CR_PLL3ON_BB = (uint32_t)NewState;
 552:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** }
 553:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */
 554:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 555:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /**
 556:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @brief  Configures the system clock (SYSCLK).
 557:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @param  RCC_SYSCLKSource: specifies the clock source used as system clock.
 558:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 559:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLKSource_HSI: HSI selected as system clock
 560:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLKSource_HSE: HSE selected as system clock
 561:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock
 562:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @retval None
 563:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   */
 564:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
 565:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** {
 418              		.loc 1 565 0
 419              		.cfi_startproc
 420              		@ args = 0, pretend = 0, frame = 0
 421              		@ frame_needed = 0, uses_anonymous_args = 0
 422              	.LVL32:
 423 0000 10B5     		push	{r4, lr}
 424              		.cfi_def_cfa_offset 8
 425              		.cfi_offset 4, -8
 426              		.cfi_offset 14, -4
 427 0002 0446     		mov	r4, r0
 428              	.LVL33:
 566:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 567:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Check the parameters */
 568:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
 429              		.loc 1 568 0
 430 0004 0228     		cmp	r0, #2
 431 0006 06D8     		bhi	.L39
 432              	.LVL34:
 433              	.L37:
 569:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR;
 434              		.loc 1 569 0
 435 0008 064A     		ldr	r2, .L40
 436 000a 5368     		ldr	r3, [r2, #4]
 437              	.LVL35:
 570:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Clear SW[1:0] bits */
 571:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   tmpreg &= CFGR_SW_Mask;
 438              		.loc 1 571 0
 439 000c 23F00303 		bic	r3, r3, #3
 440              	.LVL36:
 572:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
 573:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   tmpreg |= RCC_SYSCLKSource;
 441              		.loc 1 573 0
 442 0010 1C43     		orrs	r4, r4, r3
 443              	.LVL37:
 574:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Store the new value */
 575:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   RCC->CFGR = tmpreg;
 444              		.loc 1 575 0
 445 0012 5460     		str	r4, [r2, #4]
 576:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** }
 446              		.loc 1 576 0
 447 0014 10BD     		pop	{r4, pc}
 448              	.LVL38:
 449              	.L39:
 568:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR;
 450              		.loc 1 568 0 discriminator 1
 451 0016 4FF40E71 		mov	r1, #568
 452 001a 0348     		ldr	r0, .L40+4
 453              	.LVL39:
 454 001c FFF7FEFF 		bl	assert_failed
 455              	.LVL40:
 456 0020 F2E7     		b	.L37
 457              	.L41:
 458 0022 00BF     		.align	2
 459              	.L40:
 460 0024 00100240 		.word	1073876992
 461 0028 00000000 		.word	.LC0
 462              		.cfi_endproc
 463              	.LFE70:
 465              		.section	.text.RCC_GetSYSCLKSource,"ax",%progbits
 466              		.align	1
 467              		.global	RCC_GetSYSCLKSource
 468              		.syntax unified
 469              		.thumb
 470              		.thumb_func
 471              		.fpu softvfp
 473              	RCC_GetSYSCLKSource:
 474              	.LFB71:
 577:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 578:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /**
 579:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @brief  Returns the clock source used as system clock.
 580:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @param  None
 581:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @retval The clock source used as system clock. The returned value can
 582:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   be one of the following:
 583:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     - 0x00: HSI used as system clock
 584:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     - 0x04: HSE used as system clock
 585:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     - 0x08: PLL used as system clock
 586:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   */
 587:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** uint8_t RCC_GetSYSCLKSource(void)
 588:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** {
 475              		.loc 1 588 0
 476              		.cfi_startproc
 477              		@ args = 0, pretend = 0, frame = 0
 478              		@ frame_needed = 0, uses_anonymous_args = 0
 479              		@ link register save eliminated.
 589:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   return ((uint8_t)(RCC->CFGR & CFGR_SWS_Mask));
 480              		.loc 1 589 0
 481 0000 024B     		ldr	r3, .L43
 482 0002 5868     		ldr	r0, [r3, #4]
 590:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** }
 483              		.loc 1 590 0
 484 0004 00F00C00 		and	r0, r0, #12
 485 0008 7047     		bx	lr
 486              	.L44:
 487 000a 00BF     		.align	2
 488              	.L43:
 489 000c 00100240 		.word	1073876992
 490              		.cfi_endproc
 491              	.LFE71:
 493              		.section	.text.RCC_HCLKConfig,"ax",%progbits
 494              		.align	1
 495              		.global	RCC_HCLKConfig
 496              		.syntax unified
 497              		.thumb
 498              		.thumb_func
 499              		.fpu softvfp
 501              	RCC_HCLKConfig:
 502              	.LFB72:
 591:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 592:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /**
 593:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @brief  Configures the AHB clock (HCLK).
 594:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @param  RCC_SYSCLK: defines the AHB clock divider. This clock is derived from 
 595:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   the system clock (SYSCLK).
 596:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 597:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLK_Div1: AHB clock = SYSCLK
 598:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLK_Div2: AHB clock = SYSCLK/2
 599:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLK_Div4: AHB clock = SYSCLK/4
 600:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLK_Div8: AHB clock = SYSCLK/8
 601:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLK_Div16: AHB clock = SYSCLK/16
 602:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLK_Div64: AHB clock = SYSCLK/64
 603:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLK_Div128: AHB clock = SYSCLK/128
 604:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
 605:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
 606:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @retval None
 607:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   */
 608:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
 609:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** {
 503              		.loc 1 609 0
 504              		.cfi_startproc
 505              		@ args = 0, pretend = 0, frame = 0
 506              		@ frame_needed = 0, uses_anonymous_args = 0
 507              	.LVL41:
 508 0000 10B5     		push	{r4, lr}
 509              		.cfi_def_cfa_offset 8
 510              		.cfi_offset 4, -8
 511              		.cfi_offset 14, -4
 512              	.LVL42:
 610:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 611:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Check the parameters */
 612:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   assert_param(IS_RCC_HCLK(RCC_SYSCLK));
 513              		.loc 1 612 0
 514 0002 0446     		mov	r4, r0
 515 0004 A0B1     		cbz	r0, .L46
 516              		.loc 1 612 0 is_stmt 0 discriminator 1
 517 0006 8028     		cmp	r0, #128
 518 0008 12D0     		beq	.L46
 519              		.loc 1 612 0 discriminator 2
 520 000a 9028     		cmp	r0, #144
 521 000c 10D0     		beq	.L46
 522              		.loc 1 612 0 discriminator 3
 523 000e A028     		cmp	r0, #160
 524 0010 0ED0     		beq	.L46
 525              		.loc 1 612 0 discriminator 4
 526 0012 B028     		cmp	r0, #176
 527 0014 0CD0     		beq	.L46
 528              		.loc 1 612 0 discriminator 5
 529 0016 C028     		cmp	r0, #192
 530 0018 0AD0     		beq	.L46
 531              		.loc 1 612 0 discriminator 6
 532 001a D028     		cmp	r0, #208
 533 001c 08D0     		beq	.L46
 534              		.loc 1 612 0 discriminator 7
 535 001e E028     		cmp	r0, #224
 536 0020 06D0     		beq	.L46
 537              		.loc 1 612 0 discriminator 8
 538 0022 F028     		cmp	r0, #240
 539 0024 04D0     		beq	.L46
 540              		.loc 1 612 0 discriminator 9
 541 0026 4FF41971 		mov	r1, #612
 542 002a 0548     		ldr	r0, .L48
 543              	.LVL43:
 544 002c FFF7FEFF 		bl	assert_failed
 545              	.LVL44:
 546              	.L46:
 613:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR;
 547              		.loc 1 613 0 is_stmt 1
 548 0030 044A     		ldr	r2, .L48+4
 549 0032 5368     		ldr	r3, [r2, #4]
 550              	.LVL45:
 614:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Clear HPRE[3:0] bits */
 615:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   tmpreg &= CFGR_HPRE_Reset_Mask;
 551              		.loc 1 615 0
 552 0034 23F0F003 		bic	r3, r3, #240
 553              	.LVL46:
 616:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
 617:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   tmpreg |= RCC_SYSCLK;
 554              		.loc 1 617 0
 555 0038 1C43     		orrs	r4, r4, r3
 556              	.LVL47:
 618:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Store the new value */
 619:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   RCC->CFGR = tmpreg;
 557              		.loc 1 619 0
 558 003a 5460     		str	r4, [r2, #4]
 620:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** }
 559              		.loc 1 620 0
 560 003c 10BD     		pop	{r4, pc}
 561              	.LVL48:
 562              	.L49:
 563 003e 00BF     		.align	2
 564              	.L48:
 565 0040 00000000 		.word	.LC0
 566 0044 00100240 		.word	1073876992
 567              		.cfi_endproc
 568              	.LFE72:
 570              		.section	.text.RCC_PCLK1Config,"ax",%progbits
 571              		.align	1
 572              		.global	RCC_PCLK1Config
 573              		.syntax unified
 574              		.thumb
 575              		.thumb_func
 576              		.fpu softvfp
 578              	RCC_PCLK1Config:
 579              	.LFB73:
 621:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 622:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /**
 623:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @brief  Configures the Low Speed APB clock (PCLK1).
 624:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @param  RCC_HCLK: defines the APB1 clock divider. This clock is derived from 
 625:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   the AHB clock (HCLK).
 626:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 627:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div1: APB1 clock = HCLK
 628:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div2: APB1 clock = HCLK/2
 629:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div4: APB1 clock = HCLK/4
 630:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div8: APB1 clock = HCLK/8
 631:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
 632:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @retval None
 633:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   */
 634:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** void RCC_PCLK1Config(uint32_t RCC_HCLK)
 635:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** {
 580              		.loc 1 635 0
 581              		.cfi_startproc
 582              		@ args = 0, pretend = 0, frame = 0
 583              		@ frame_needed = 0, uses_anonymous_args = 0
 584              	.LVL49:
 585 0000 10B5     		push	{r4, lr}
 586              		.cfi_def_cfa_offset 8
 587              		.cfi_offset 4, -8
 588              		.cfi_offset 14, -4
 589              	.LVL50:
 636:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 637:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Check the parameters */
 638:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   assert_param(IS_RCC_PCLK(RCC_HCLK));
 590              		.loc 1 638 0
 591 0002 0446     		mov	r4, r0
 592 0004 80B1     		cbz	r0, .L51
 593              		.loc 1 638 0 is_stmt 0 discriminator 1
 594 0006 B0F5806F 		cmp	r0, #1024
 595 000a 0DD0     		beq	.L51
 596              		.loc 1 638 0 discriminator 2
 597 000c B0F5A06F 		cmp	r0, #1280
 598 0010 0AD0     		beq	.L51
 599              		.loc 1 638 0 discriminator 3
 600 0012 B0F5C06F 		cmp	r0, #1536
 601 0016 07D0     		beq	.L51
 602              		.loc 1 638 0 discriminator 4
 603 0018 B0F5E06F 		cmp	r0, #1792
 604 001c 04D0     		beq	.L51
 605              		.loc 1 638 0 discriminator 5
 606 001e 40F27E21 		movw	r1, #638
 607 0022 0548     		ldr	r0, .L53
 608              	.LVL51:
 609 0024 FFF7FEFF 		bl	assert_failed
 610              	.LVL52:
 611              	.L51:
 639:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR;
 612              		.loc 1 639 0 is_stmt 1
 613 0028 044A     		ldr	r2, .L53+4
 614 002a 5368     		ldr	r3, [r2, #4]
 615              	.LVL53:
 640:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Clear PPRE1[2:0] bits */
 641:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   tmpreg &= CFGR_PPRE1_Reset_Mask;
 616              		.loc 1 641 0
 617 002c 23F4E063 		bic	r3, r3, #1792
 618              	.LVL54:
 642:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Set PPRE1[2:0] bits according to RCC_HCLK value */
 643:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   tmpreg |= RCC_HCLK;
 619              		.loc 1 643 0
 620 0030 1C43     		orrs	r4, r4, r3
 621              	.LVL55:
 644:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Store the new value */
 645:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   RCC->CFGR = tmpreg;
 622              		.loc 1 645 0
 623 0032 5460     		str	r4, [r2, #4]
 646:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** }
 624              		.loc 1 646 0
 625 0034 10BD     		pop	{r4, pc}
 626              	.LVL56:
 627              	.L54:
 628 0036 00BF     		.align	2
 629              	.L53:
 630 0038 00000000 		.word	.LC0
 631 003c 00100240 		.word	1073876992
 632              		.cfi_endproc
 633              	.LFE73:
 635              		.section	.text.RCC_PCLK2Config,"ax",%progbits
 636              		.align	1
 637              		.global	RCC_PCLK2Config
 638              		.syntax unified
 639              		.thumb
 640              		.thumb_func
 641              		.fpu softvfp
 643              	RCC_PCLK2Config:
 644              	.LFB74:
 647:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 648:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /**
 649:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @brief  Configures the High Speed APB clock (PCLK2).
 650:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @param  RCC_HCLK: defines the APB2 clock divider. This clock is derived from 
 651:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   the AHB clock (HCLK).
 652:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 653:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div1: APB2 clock = HCLK
 654:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div2: APB2 clock = HCLK/2
 655:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div4: APB2 clock = HCLK/4
 656:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div8: APB2 clock = HCLK/8
 657:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
 658:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @retval None
 659:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   */
 660:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** void RCC_PCLK2Config(uint32_t RCC_HCLK)
 661:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** {
 645              		.loc 1 661 0
 646              		.cfi_startproc
 647              		@ args = 0, pretend = 0, frame = 0
 648              		@ frame_needed = 0, uses_anonymous_args = 0
 649              	.LVL57:
 650 0000 10B5     		push	{r4, lr}
 651              		.cfi_def_cfa_offset 8
 652              		.cfi_offset 4, -8
 653              		.cfi_offset 14, -4
 654              	.LVL58:
 662:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 663:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Check the parameters */
 664:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   assert_param(IS_RCC_PCLK(RCC_HCLK));
 655              		.loc 1 664 0
 656 0002 0446     		mov	r4, r0
 657 0004 80B1     		cbz	r0, .L56
 658              		.loc 1 664 0 is_stmt 0 discriminator 1
 659 0006 B0F5806F 		cmp	r0, #1024
 660 000a 0DD0     		beq	.L56
 661              		.loc 1 664 0 discriminator 2
 662 000c B0F5A06F 		cmp	r0, #1280
 663 0010 0AD0     		beq	.L56
 664              		.loc 1 664 0 discriminator 3
 665 0012 B0F5C06F 		cmp	r0, #1536
 666 0016 07D0     		beq	.L56
 667              		.loc 1 664 0 discriminator 4
 668 0018 B0F5E06F 		cmp	r0, #1792
 669 001c 04D0     		beq	.L56
 670              		.loc 1 664 0 discriminator 5
 671 001e 4FF42671 		mov	r1, #664
 672 0022 0548     		ldr	r0, .L58
 673              	.LVL59:
 674 0024 FFF7FEFF 		bl	assert_failed
 675              	.LVL60:
 676              	.L56:
 665:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR;
 677              		.loc 1 665 0 is_stmt 1
 678 0028 044B     		ldr	r3, .L58+4
 679 002a 5868     		ldr	r0, [r3, #4]
 680              	.LVL61:
 666:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Clear PPRE2[2:0] bits */
 667:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   tmpreg &= CFGR_PPRE2_Reset_Mask;
 681              		.loc 1 667 0
 682 002c 20F46050 		bic	r0, r0, #14336
 683              	.LVL62:
 668:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Set PPRE2[2:0] bits according to RCC_HCLK value */
 669:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   tmpreg |= RCC_HCLK << 3;
 684              		.loc 1 669 0
 685 0030 40EAC400 		orr	r0, r0, r4, lsl #3
 686              	.LVL63:
 670:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Store the new value */
 671:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   RCC->CFGR = tmpreg;
 687              		.loc 1 671 0
 688 0034 5860     		str	r0, [r3, #4]
 672:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** }
 689              		.loc 1 672 0
 690 0036 10BD     		pop	{r4, pc}
 691              	.LVL64:
 692              	.L59:
 693              		.align	2
 694              	.L58:
 695 0038 00000000 		.word	.LC0
 696 003c 00100240 		.word	1073876992
 697              		.cfi_endproc
 698              	.LFE74:
 700              		.section	.text.RCC_ITConfig,"ax",%progbits
 701              		.align	1
 702              		.global	RCC_ITConfig
 703              		.syntax unified
 704              		.thumb
 705              		.thumb_func
 706              		.fpu softvfp
 708              	RCC_ITConfig:
 709              	.LFB75:
 673:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 674:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /**
 675:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @brief  Enables or disables the specified RCC interrupts.
 676:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @param  RCC_IT: specifies the RCC interrupt sources to be enabled or disabled.
 677:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * 
 678:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   For @b STM32_Connectivity_line_devices, this parameter can be any combination
 679:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   of the following values        
 680:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSIRDY: LSI ready interrupt
 681:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSERDY: LSE ready interrupt
 682:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSIRDY: HSI ready interrupt
 683:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSERDY: HSE ready interrupt
 684:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLLRDY: PLL ready interrupt
 685:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLL2RDY: PLL2 ready interrupt
 686:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLL3RDY: PLL3 ready interrupt
 687:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * 
 688:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   For @b other_STM32_devices, this parameter can be any combination of the 
 689:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   following values        
 690:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSIRDY: LSI ready interrupt
 691:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSERDY: LSE ready interrupt
 692:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSIRDY: HSI ready interrupt
 693:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSERDY: HSE ready interrupt
 694:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLLRDY: PLL ready interrupt
 695:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *       
 696:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @param  NewState: new state of the specified RCC interrupts.
 697:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   This parameter can be: ENABLE or DISABLE.
 698:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @retval None
 699:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   */
 700:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
 701:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** {
 710              		.loc 1 701 0
 711              		.cfi_startproc
 712              		@ args = 0, pretend = 0, frame = 0
 713              		@ frame_needed = 0, uses_anonymous_args = 0
 714              	.LVL65:
 715 0000 38B5     		push	{r3, r4, r5, lr}
 716              		.cfi_def_cfa_offset 16
 717              		.cfi_offset 3, -16
 718              		.cfi_offset 4, -12
 719              		.cfi_offset 5, -8
 720              		.cfi_offset 14, -4
 721 0002 0446     		mov	r4, r0
 722 0004 0D46     		mov	r5, r1
 702:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Check the parameters */
 703:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   assert_param(IS_RCC_IT(RCC_IT));
 723              		.loc 1 703 0
 724 0006 10F0E00F 		tst	r0, #224
 725 000a 00D1     		bne	.L61
 726              		.loc 1 703 0 is_stmt 0 discriminator 2
 727 000c 20B9     		cbnz	r0, .L62
 728              	.L61:
 729              		.loc 1 703 0 discriminator 3
 730 000e 40F2BF21 		movw	r1, #703
 731              	.LVL66:
 732 0012 0B48     		ldr	r0, .L69
 733              	.LVL67:
 734 0014 FFF7FEFF 		bl	assert_failed
 735              	.LVL68:
 736              	.L62:
 704:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 737              		.loc 1 704 0 is_stmt 1
 738 0018 012D     		cmp	r5, #1
 739 001a 06D8     		bhi	.L67
 740              	.L63:
 705:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   if (NewState != DISABLE)
 741              		.loc 1 705 0
 742 001c 5DB9     		cbnz	r5, .L68
 706:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   {
 707:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****     /* Perform Byte access to RCC_CIR bits to enable the selected interrupts */
 708:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****     *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 709:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   }
 710:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   else
 711:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   {
 712:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****     /* Perform Byte access to RCC_CIR bits to disable the selected interrupts */
 713:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****     *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 743              		.loc 1 713 0
 744 001e 094A     		ldr	r2, .L69+4
 745 0020 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 746 0022 23EA0404 		bic	r4, r3, r4
 747 0026 1470     		strb	r4, [r2]
 748              	.L60:
 714:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   }
 715:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** }
 749              		.loc 1 715 0
 750 0028 38BD     		pop	{r3, r4, r5, pc}
 751              	.L67:
 704:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   if (NewState != DISABLE)
 752              		.loc 1 704 0 discriminator 1
 753 002a 4FF43071 		mov	r1, #704
 754 002e 0448     		ldr	r0, .L69
 755 0030 FFF7FEFF 		bl	assert_failed
 756              	.LVL69:
 757 0034 F2E7     		b	.L63
 758              	.L68:
 708:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   }
 759              		.loc 1 708 0
 760 0036 034A     		ldr	r2, .L69+4
 761 0038 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 762 003a 1C43     		orrs	r4, r4, r3
 763 003c 1470     		strb	r4, [r2]
 764 003e F3E7     		b	.L60
 765              	.L70:
 766              		.align	2
 767              	.L69:
 768 0040 00000000 		.word	.LC0
 769 0044 09100240 		.word	1073877001
 770              		.cfi_endproc
 771              	.LFE75:
 773              		.section	.text.RCC_USBCLKConfig,"ax",%progbits
 774              		.align	1
 775              		.global	RCC_USBCLKConfig
 776              		.syntax unified
 777              		.thumb
 778              		.thumb_func
 779              		.fpu softvfp
 781              	RCC_USBCLKConfig:
 782              	.LFB76:
 716:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 717:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #ifndef STM32F10X_CL
 718:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /**
 719:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @brief  Configures the USB clock (USBCLK).
 720:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @param  RCC_USBCLKSource: specifies the USB clock source. This clock is 
 721:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   derived from the PLL output.
 722:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 723:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_USBCLKSource_PLLCLK_1Div5: PLL clock divided by 1,5 selected as USB 
 724:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *                                     clock source
 725:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_USBCLKSource_PLLCLK_Div1: PLL clock selected as USB clock source
 726:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @retval None
 727:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   */
 728:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource)
 729:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** {
 783              		.loc 1 729 0
 784              		.cfi_startproc
 785              		@ args = 0, pretend = 0, frame = 0
 786              		@ frame_needed = 0, uses_anonymous_args = 0
 787              	.LVL70:
 788 0000 10B5     		push	{r4, lr}
 789              		.cfi_def_cfa_offset 8
 790              		.cfi_offset 4, -8
 791              		.cfi_offset 14, -4
 792 0002 0446     		mov	r4, r0
 730:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Check the parameters */
 731:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));
 793              		.loc 1 731 0
 794 0004 0128     		cmp	r0, #1
 795 0006 04D9     		bls	.L72
 796              		.loc 1 731 0 is_stmt 0 discriminator 1
 797 0008 40F2DB21 		movw	r1, #731
 798 000c 0248     		ldr	r0, .L74
 799              	.LVL71:
 800 000e FFF7FEFF 		bl	assert_failed
 801              	.LVL72:
 802              	.L72:
 732:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 733:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
 803              		.loc 1 733 0 is_stmt 1
 804 0012 024B     		ldr	r3, .L74+4
 805 0014 1C60     		str	r4, [r3]
 734:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** }
 806              		.loc 1 734 0
 807 0016 10BD     		pop	{r4, pc}
 808              	.LVL73:
 809              	.L75:
 810              		.align	2
 811              	.L74:
 812 0018 00000000 		.word	.LC0
 813 001c D8004242 		.word	1111621848
 814              		.cfi_endproc
 815              	.LFE76:
 817              		.section	.text.RCC_ADCCLKConfig,"ax",%progbits
 818              		.align	1
 819              		.global	RCC_ADCCLKConfig
 820              		.syntax unified
 821              		.thumb
 822              		.thumb_func
 823              		.fpu softvfp
 825              	RCC_ADCCLKConfig:
 826              	.LFB77:
 735:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #else
 736:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /**
 737:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @brief  Configures the USB OTG FS clock (OTGFSCLK).
 738:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   This function applies only to STM32 Connectivity line devices.
 739:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @param  RCC_OTGFSCLKSource: specifies the USB OTG FS clock source.
 740:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   This clock is derived from the PLL output.
 741:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 742:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg  RCC_OTGFSCLKSource_PLLVCO_Div3: PLL VCO clock divided by 2 selected as USB OTG FS clo
 743:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg  RCC_OTGFSCLKSource_PLLVCO_Div2: PLL VCO clock divided by 2 selected as USB OTG FS clo
 744:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @retval None
 745:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   */
 746:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** void RCC_OTGFSCLKConfig(uint32_t RCC_OTGFSCLKSource)
 747:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** {
 748:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Check the parameters */
 749:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   assert_param(IS_RCC_OTGFSCLK_SOURCE(RCC_OTGFSCLKSource));
 750:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 751:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *(__IO uint32_t *) CFGR_OTGFSPRE_BB = RCC_OTGFSCLKSource;
 752:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** }
 753:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */ 
 754:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 755:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /**
 756:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @brief  Configures the ADC clock (ADCCLK).
 757:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @param  RCC_PCLK2: defines the ADC clock divider. This clock is derived from 
 758:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   the APB2 clock (PCLK2).
 759:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 760:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_PCLK2_Div2: ADC clock = PCLK2/2
 761:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_PCLK2_Div4: ADC clock = PCLK2/4
 762:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_PCLK2_Div6: ADC clock = PCLK2/6
 763:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_PCLK2_Div8: ADC clock = PCLK2/8
 764:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @retval None
 765:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   */
 766:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** void RCC_ADCCLKConfig(uint32_t RCC_PCLK2)
 767:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** {
 827              		.loc 1 767 0
 828              		.cfi_startproc
 829              		@ args = 0, pretend = 0, frame = 0
 830              		@ frame_needed = 0, uses_anonymous_args = 0
 831              	.LVL74:
 832 0000 10B5     		push	{r4, lr}
 833              		.cfi_def_cfa_offset 8
 834              		.cfi_offset 4, -8
 835              		.cfi_offset 14, -4
 836              	.LVL75:
 768:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 769:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Check the parameters */
 770:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   assert_param(IS_RCC_ADCCLK(RCC_PCLK2));
 837              		.loc 1 770 0
 838 0002 0446     		mov	r4, r0
 839 0004 68B1     		cbz	r0, .L77
 840              		.loc 1 770 0 is_stmt 0 discriminator 1
 841 0006 B0F5804F 		cmp	r0, #16384
 842 000a 0AD0     		beq	.L77
 843              		.loc 1 770 0 discriminator 2
 844 000c B0F5004F 		cmp	r0, #32768
 845 0010 07D0     		beq	.L77
 846              		.loc 1 770 0 discriminator 3
 847 0012 B0F5404F 		cmp	r0, #49152
 848 0016 04D0     		beq	.L77
 849              		.loc 1 770 0 discriminator 4
 850 0018 40F20231 		movw	r1, #770
 851 001c 0448     		ldr	r0, .L79
 852              	.LVL76:
 853 001e FFF7FEFF 		bl	assert_failed
 854              	.LVL77:
 855              	.L77:
 771:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR;
 856              		.loc 1 771 0 is_stmt 1
 857 0022 044A     		ldr	r2, .L79+4
 858 0024 5368     		ldr	r3, [r2, #4]
 859              	.LVL78:
 772:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Clear ADCPRE[1:0] bits */
 773:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   tmpreg &= CFGR_ADCPRE_Reset_Mask;
 860              		.loc 1 773 0
 861 0026 23F44043 		bic	r3, r3, #49152
 862              	.LVL79:
 774:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
 775:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   tmpreg |= RCC_PCLK2;
 863              		.loc 1 775 0
 864 002a 1C43     		orrs	r4, r4, r3
 865              	.LVL80:
 776:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Store the new value */
 777:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   RCC->CFGR = tmpreg;
 866              		.loc 1 777 0
 867 002c 5460     		str	r4, [r2, #4]
 778:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** }
 868              		.loc 1 778 0
 869 002e 10BD     		pop	{r4, pc}
 870              	.LVL81:
 871              	.L80:
 872              		.align	2
 873              	.L79:
 874 0030 00000000 		.word	.LC0
 875 0034 00100240 		.word	1073876992
 876              		.cfi_endproc
 877              	.LFE77:
 879              		.section	.text.RCC_LSEConfig,"ax",%progbits
 880              		.align	1
 881              		.global	RCC_LSEConfig
 882              		.syntax unified
 883              		.thumb
 884              		.thumb_func
 885              		.fpu softvfp
 887              	RCC_LSEConfig:
 888              	.LFB78:
 779:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 780:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #ifdef STM32F10X_CL
 781:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /**
 782:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @brief  Configures the I2S2 clock source(I2S2CLK).
 783:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @note
 784:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   - This function must be called before enabling I2S2 APB clock.
 785:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   - This function applies only to STM32 Connectivity line devices.
 786:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @param  RCC_I2S2CLKSource: specifies the I2S2 clock source.
 787:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 788:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_I2S2CLKSource_SYSCLK: system clock selected as I2S2 clock entry
 789:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_I2S2CLKSource_PLL3_VCO: PLL3 VCO clock selected as I2S2 clock entry
 790:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @retval None
 791:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   */
 792:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** void RCC_I2S2CLKConfig(uint32_t RCC_I2S2CLKSource)
 793:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** {
 794:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Check the parameters */
 795:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   assert_param(IS_RCC_I2S2CLK_SOURCE(RCC_I2S2CLKSource));
 796:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 797:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *(__IO uint32_t *) CFGR2_I2S2SRC_BB = RCC_I2S2CLKSource;
 798:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** }
 799:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 800:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /**
 801:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @brief  Configures the I2S3 clock source(I2S2CLK).
 802:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @note
 803:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   - This function must be called before enabling I2S3 APB clock.
 804:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   - This function applies only to STM32 Connectivity line devices.
 805:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @param  RCC_I2S3CLKSource: specifies the I2S3 clock source.
 806:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 807:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_I2S3CLKSource_SYSCLK: system clock selected as I2S3 clock entry
 808:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_I2S3CLKSource_PLL3_VCO: PLL3 VCO clock selected as I2S3 clock entry
 809:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @retval None
 810:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   */
 811:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** void RCC_I2S3CLKConfig(uint32_t RCC_I2S3CLKSource)
 812:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** {
 813:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Check the parameters */
 814:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   assert_param(IS_RCC_I2S3CLK_SOURCE(RCC_I2S3CLKSource));
 815:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 816:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *(__IO uint32_t *) CFGR2_I2S3SRC_BB = RCC_I2S3CLKSource;
 817:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** }
 818:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */
 819:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 820:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /**
 821:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @brief  Configures the External Low Speed oscillator (LSE).
 822:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @param  RCC_LSE: specifies the new state of the LSE.
 823:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 824:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_LSE_OFF: LSE oscillator OFF
 825:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_LSE_ON: LSE oscillator ON
 826:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
 827:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @retval None
 828:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   */
 829:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** void RCC_LSEConfig(uint8_t RCC_LSE)
 830:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** {
 889              		.loc 1 830 0
 890              		.cfi_startproc
 891              		@ args = 0, pretend = 0, frame = 0
 892              		@ frame_needed = 0, uses_anonymous_args = 0
 893              	.LVL82:
 894 0000 10B5     		push	{r4, lr}
 895              		.cfi_def_cfa_offset 8
 896              		.cfi_offset 4, -8
 897              		.cfi_offset 14, -4
 898 0002 0446     		mov	r4, r0
 831:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Check the parameters */
 832:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   assert_param(IS_RCC_LSE(RCC_LSE));
 899              		.loc 1 832 0
 900 0004 0128     		cmp	r0, #1
 901 0006 01D9     		bls	.L82
 902              		.loc 1 832 0 is_stmt 0 discriminator 1
 903 0008 0428     		cmp	r0, #4
 904 000a 08D1     		bne	.L87
 905              	.LVL83:
 906              	.L82:
 833:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
 834:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Reset LSEON bit */
 835:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 907              		.loc 1 835 0 is_stmt 1
 908 000c 0B4B     		ldr	r3, .L88
 909 000e 0022     		movs	r2, #0
 910 0010 1A70     		strb	r2, [r3]
 836:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Reset LSEBYP bit */
 837:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 911              		.loc 1 837 0
 912 0012 1A70     		strb	r2, [r3]
 838:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
 839:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   switch(RCC_LSE)
 913              		.loc 1 839 0
 914 0014 012C     		cmp	r4, #1
 915 0016 08D0     		beq	.L84
 916 0018 042C     		cmp	r4, #4
 917 001a 0AD0     		beq	.L85
 918              	.L81:
 840:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   {
 841:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****     case RCC_LSE_ON:
 842:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****       /* Set LSEON bit */
 843:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****       *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 844:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****       break;
 845:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****       
 846:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****     case RCC_LSE_Bypass:
 847:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****       /* Set LSEBYP and LSEON bits */
 848:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****       *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 849:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****       break;            
 850:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****       
 851:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****     default:
 852:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****       break;      
 853:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   }
 854:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** }
 919              		.loc 1 854 0
 920 001c 10BD     		pop	{r4, pc}
 921              	.LVL84:
 922              	.L87:
 832:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
 923              		.loc 1 832 0 discriminator 2
 924 001e 4FF45071 		mov	r1, #832
 925 0022 0748     		ldr	r0, .L88+4
 926              	.LVL85:
 927 0024 FFF7FEFF 		bl	assert_failed
 928              	.LVL86:
 929 0028 F0E7     		b	.L82
 930              	.L84:
 843:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****       break;
 931              		.loc 1 843 0
 932 002a 044B     		ldr	r3, .L88
 933 002c 0122     		movs	r2, #1
 934 002e 1A70     		strb	r2, [r3]
 844:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****       
 935              		.loc 1 844 0
 936 0030 F4E7     		b	.L81
 937              	.L85:
 848:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****       break;            
 938              		.loc 1 848 0
 939 0032 024B     		ldr	r3, .L88
 940 0034 0522     		movs	r2, #5
 941 0036 1A70     		strb	r2, [r3]
 942              		.loc 1 854 0
 943 0038 F0E7     		b	.L81
 944              	.L89:
 945 003a 00BF     		.align	2
 946              	.L88:
 947 003c 20100240 		.word	1073877024
 948 0040 00000000 		.word	.LC0
 949              		.cfi_endproc
 950              	.LFE78:
 952              		.section	.text.RCC_LSICmd,"ax",%progbits
 953              		.align	1
 954              		.global	RCC_LSICmd
 955              		.syntax unified
 956              		.thumb
 957              		.thumb_func
 958              		.fpu softvfp
 960              	RCC_LSICmd:
 961              	.LFB79:
 855:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 856:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /**
 857:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @brief  Enables or disables the Internal Low Speed oscillator (LSI).
 858:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @note   LSI can not be disabled if the IWDG is running.
 859:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @param  NewState: new state of the LSI. This parameter can be: ENABLE or DISABLE.
 860:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @retval None
 861:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   */
 862:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** void RCC_LSICmd(FunctionalState NewState)
 863:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** {
 962              		.loc 1 863 0
 963              		.cfi_startproc
 964              		@ args = 0, pretend = 0, frame = 0
 965              		@ frame_needed = 0, uses_anonymous_args = 0
 966              	.LVL87:
 967 0000 10B5     		push	{r4, lr}
 968              		.cfi_def_cfa_offset 8
 969              		.cfi_offset 4, -8
 970              		.cfi_offset 14, -4
 971 0002 0446     		mov	r4, r0
 864:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Check the parameters */
 865:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 972              		.loc 1 865 0
 973 0004 0128     		cmp	r0, #1
 974 0006 04D9     		bls	.L91
 975              		.loc 1 865 0 is_stmt 0 discriminator 1
 976 0008 40F26131 		movw	r1, #865
 977 000c 0248     		ldr	r0, .L93
 978              	.LVL88:
 979 000e FFF7FEFF 		bl	assert_failed
 980              	.LVL89:
 981              	.L91:
 866:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 982              		.loc 1 866 0 is_stmt 1
 983 0012 024B     		ldr	r3, .L93+4
 984 0014 1C60     		str	r4, [r3]
 867:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** }
 985              		.loc 1 867 0
 986 0016 10BD     		pop	{r4, pc}
 987              	.L94:
 988              		.align	2
 989              	.L93:
 990 0018 00000000 		.word	.LC0
 991 001c 80044242 		.word	1111622784
 992              		.cfi_endproc
 993              	.LFE79:
 995              		.section	.text.RCC_RTCCLKConfig,"ax",%progbits
 996              		.align	1
 997              		.global	RCC_RTCCLKConfig
 998              		.syntax unified
 999              		.thumb
 1000              		.thumb_func
 1001              		.fpu softvfp
 1003              	RCC_RTCCLKConfig:
 1004              	.LFB80:
 868:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 869:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /**
 870:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @brief  Configures the RTC clock (RTCCLK).
 871:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @note   Once the RTC clock is selected it can't be changed unless the Backup domain is reset.
 872:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @param  RCC_RTCCLKSource: specifies the RTC clock source.
 873:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 874:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_RTCCLKSource_LSE: LSE selected as RTC clock
 875:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_RTCCLKSource_LSI: LSI selected as RTC clock
 876:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_RTCCLKSource_HSE_Div128: HSE clock divided by 128 selected as RTC clock
 877:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @retval None
 878:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   */
 879:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
 880:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** {
 1005              		.loc 1 880 0
 1006              		.cfi_startproc
 1007              		@ args = 0, pretend = 0, frame = 0
 1008              		@ frame_needed = 0, uses_anonymous_args = 0
 1009              	.LVL90:
 1010 0000 10B5     		push	{r4, lr}
 1011              		.cfi_def_cfa_offset 8
 1012              		.cfi_offset 4, -8
 1013              		.cfi_offset 14, -4
 1014 0002 0446     		mov	r4, r0
 881:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Check the parameters */
 882:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
 1015              		.loc 1 882 0
 1016 0004 B0F5807F 		cmp	r0, #256
 1017 0008 0AD0     		beq	.L96
 1018              		.loc 1 882 0 is_stmt 0 discriminator 1
 1019 000a B0F5007F 		cmp	r0, #512
 1020 000e 07D0     		beq	.L96
 1021              		.loc 1 882 0 discriminator 2
 1022 0010 B0F5407F 		cmp	r0, #768
 1023 0014 04D0     		beq	.L96
 1024              		.loc 1 882 0 discriminator 3
 1025 0016 40F27231 		movw	r1, #882
 1026 001a 0448     		ldr	r0, .L98
 1027              	.LVL91:
 1028 001c FFF7FEFF 		bl	assert_failed
 1029              	.LVL92:
 1030              	.L96:
 883:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Select the RTC clock source */
 884:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   RCC->BDCR |= RCC_RTCCLKSource;
 1031              		.loc 1 884 0 is_stmt 1
 1032 0020 034A     		ldr	r2, .L98+4
 1033 0022 136A     		ldr	r3, [r2, #32]
 1034 0024 1C43     		orrs	r4, r4, r3
 1035              	.LVL93:
 1036 0026 1462     		str	r4, [r2, #32]
 885:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** }
 1037              		.loc 1 885 0
 1038 0028 10BD     		pop	{r4, pc}
 1039              	.L99:
 1040 002a 00BF     		.align	2
 1041              	.L98:
 1042 002c 00000000 		.word	.LC0
 1043 0030 00100240 		.word	1073876992
 1044              		.cfi_endproc
 1045              	.LFE80:
 1047              		.section	.text.RCC_RTCCLKCmd,"ax",%progbits
 1048              		.align	1
 1049              		.global	RCC_RTCCLKCmd
 1050              		.syntax unified
 1051              		.thumb
 1052              		.thumb_func
 1053              		.fpu softvfp
 1055              	RCC_RTCCLKCmd:
 1056              	.LFB81:
 886:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 887:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /**
 888:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @brief  Enables or disables the RTC clock.
 889:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @note   This function must be used only after the RTC clock was selected using the RCC_RTCCLKCo
 890:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
 891:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @retval None
 892:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   */
 893:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** void RCC_RTCCLKCmd(FunctionalState NewState)
 894:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** {
 1057              		.loc 1 894 0
 1058              		.cfi_startproc
 1059              		@ args = 0, pretend = 0, frame = 0
 1060              		@ frame_needed = 0, uses_anonymous_args = 0
 1061              	.LVL94:
 1062 0000 10B5     		push	{r4, lr}
 1063              		.cfi_def_cfa_offset 8
 1064              		.cfi_offset 4, -8
 1065              		.cfi_offset 14, -4
 1066 0002 0446     		mov	r4, r0
 895:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Check the parameters */
 896:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 1067              		.loc 1 896 0
 1068 0004 0128     		cmp	r0, #1
 1069 0006 04D9     		bls	.L101
 1070              		.loc 1 896 0 is_stmt 0 discriminator 1
 1071 0008 4FF46071 		mov	r1, #896
 1072 000c 0248     		ldr	r0, .L103
 1073              	.LVL95:
 1074 000e FFF7FEFF 		bl	assert_failed
 1075              	.LVL96:
 1076              	.L101:
 897:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 1077              		.loc 1 897 0 is_stmt 1
 1078 0012 024B     		ldr	r3, .L103+4
 1079 0014 1C60     		str	r4, [r3]
 898:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** }
 1080              		.loc 1 898 0
 1081 0016 10BD     		pop	{r4, pc}
 1082              	.L104:
 1083              		.align	2
 1084              	.L103:
 1085 0018 00000000 		.word	.LC0
 1086 001c 3C044242 		.word	1111622716
 1087              		.cfi_endproc
 1088              	.LFE81:
 1090              		.section	.text.RCC_GetClocksFreq,"ax",%progbits
 1091              		.align	1
 1092              		.global	RCC_GetClocksFreq
 1093              		.syntax unified
 1094              		.thumb
 1095              		.thumb_func
 1096              		.fpu softvfp
 1098              	RCC_GetClocksFreq:
 1099              	.LFB82:
 899:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 900:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /**
 901:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @brief  Returns the frequencies of different on chip clocks.
 902:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @param  RCC_Clocks: pointer to a RCC_ClocksTypeDef structure which will hold
 903:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *         the clocks frequencies.
 904:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @note   The result of this function could be not correct when using 
 905:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *         fractional value for HSE crystal.  
 906:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @retval None
 907:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   */
 908:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
 909:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** {
 1100              		.loc 1 909 0
 1101              		.cfi_startproc
 1102              		@ args = 0, pretend = 0, frame = 0
 1103              		@ frame_needed = 0, uses_anonymous_args = 0
 1104              		@ link register save eliminated.
 1105              	.LVL97:
 1106 0000 10B4     		push	{r4}
 1107              		.cfi_def_cfa_offset 4
 1108              		.cfi_offset 4, -4
 1109              	.LVL98:
 910:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 911:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 912:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #ifdef  STM32F10X_CL
 913:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   uint32_t prediv1source = 0, prediv1factor = 0, prediv2factor = 0, pll2mull = 0;
 914:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */
 915:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 916:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
 917:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   uint32_t prediv1factor = 0;
 918:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #endif
 919:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****     
 920:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Get SYSCLK source -------------------------------------------------------*/
 921:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   tmp = RCC->CFGR & CFGR_SWS_Mask;
 1110              		.loc 1 921 0
 1111 0002 294B     		ldr	r3, .L117
 1112 0004 5B68     		ldr	r3, [r3, #4]
 1113 0006 03F00C03 		and	r3, r3, #12
 1114              	.LVL99:
 922:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   
 923:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   switch (tmp)
 1115              		.loc 1 923 0
 1116 000a 042B     		cmp	r3, #4
 1117 000c 2BD0     		beq	.L107
 1118 000e 082B     		cmp	r3, #8
 1119 0010 2CD0     		beq	.L108
 1120 0012 13B1     		cbz	r3, .L115
 924:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   {
 925:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****     case 0x00:  /* HSI used as system clock */
 926:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 927:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****       break;
 928:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****     case 0x04:  /* HSE used as system clock */
 929:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 930:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****       break;
 931:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****     case 0x08:  /* PLL used as system clock */
 932:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 933:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****       /* Get PLL clock source and multiplication factor ----------------------*/
 934:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****       pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 935:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****       pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 936:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****       
 937:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #ifndef STM32F10X_CL      
 938:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****       pllmull = ( pllmull >> 18) + 2;
 939:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****       
 940:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****       if (pllsource == 0x00)
 941:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****       {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
 942:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****         RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 943:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****       }
 944:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****       else
 945:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****       {
 946:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****  #if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
 947:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****        prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
 948:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****        /* HSE oscillator clock selected as PREDIV1 clock entry */
 949:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****        RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull; 
 950:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****  #else
 951:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****         /* HSE selected as PLL clock entry */
 952:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****         if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 953:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****         {/* HSE oscillator clock divided by 2 */
 954:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****           RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 955:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****         }
 956:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****         else
 957:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****         {
 958:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****           RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 959:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****         }
 960:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****  #endif
 961:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****       }
 962:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #else
 963:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****       pllmull = pllmull >> 18;
 964:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****       
 965:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****       if (pllmull != 0x0D)
 966:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****       {
 967:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****          pllmull += 2;
 968:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****       }
 969:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****       else
 970:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****       { /* PLL multiplication factor = PLL input clock * 6.5 */
 971:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****         pllmull = 13 / 2; 
 972:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****       }
 973:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****             
 974:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****       if (pllsource == 0x00)
 975:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****       {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
 976:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****         RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 977:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****       }
 978:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****       else
 979:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****       {/* PREDIV1 selected as PLL clock entry */
 980:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****         
 981:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****         /* Get PREDIV1 clock source and division factor */
 982:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****         prediv1source = RCC->CFGR2 & CFGR2_PREDIV1SRC;
 983:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****         prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
 984:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****         
 985:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****         if (prediv1source == 0)
 986:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****         { /* HSE oscillator clock selected as PREDIV1 clock entry */
 987:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****           RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull;          
 988:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****         }
 989:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****         else
 990:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****         {/* PLL2 clock selected as PREDIV1 clock entry */
 991:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****           
 992:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****           /* Get PREDIV2 division factor and PLL2 multiplication factor */
 993:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****           prediv2factor = ((RCC->CFGR2 & CFGR2_PREDIV2) >> 4) + 1;
 994:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****           pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
 995:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****           RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor)
 996:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****         }
 997:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****       }
 998:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */ 
 999:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****       break;
1000:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
1001:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****     default:
1002:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 1121              		.loc 1 1002 0
 1122 0014 254B     		ldr	r3, .L117+4
 1123              	.LVL100:
 1124 0016 0360     		str	r3, [r0]
1003:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****       break;
 1125              		.loc 1 1003 0
 1126 0018 01E0     		b	.L110
 1127              	.LVL101:
 1128              	.L115:
 926:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****       break;
 1129              		.loc 1 926 0
 1130 001a 244B     		ldr	r3, .L117+4
 1131              	.LVL102:
 1132 001c 0360     		str	r3, [r0]
 1133              	.LVL103:
 1134              	.L110:
1004:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   }
1005:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
1006:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
1007:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Get HCLK prescaler */
1008:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 1135              		.loc 1 1008 0
 1136 001e 2249     		ldr	r1, .L117
 1137 0020 4B68     		ldr	r3, [r1, #4]
 1138              	.LVL104:
1009:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   tmp = tmp >> 4;
 1139              		.loc 1 1009 0
 1140 0022 C3F30313 		ubfx	r3, r3, #4, #4
 1141              	.LVL105:
1010:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   presc = APBAHBPrescTable[tmp];
 1142              		.loc 1 1010 0
 1143 0026 224C     		ldr	r4, .L117+8
 1144 0028 E35C     		ldrb	r3, [r4, r3]	@ zero_extendqisi2
 1145              	.LVL106:
 1146 002a DAB2     		uxtb	r2, r3
 1147              	.LVL107:
1011:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* HCLK clock frequency */
1012:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 1148              		.loc 1 1012 0
 1149 002c 0368     		ldr	r3, [r0]
 1150 002e D340     		lsrs	r3, r3, r2
 1151 0030 4360     		str	r3, [r0, #4]
1013:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Get PCLK1 prescaler */
1014:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 1152              		.loc 1 1014 0
 1153 0032 4A68     		ldr	r2, [r1, #4]
 1154              	.LVL108:
1015:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   tmp = tmp >> 8;
 1155              		.loc 1 1015 0
 1156 0034 C2F30222 		ubfx	r2, r2, #8, #3
 1157              	.LVL109:
1016:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   presc = APBAHBPrescTable[tmp];
 1158              		.loc 1 1016 0
 1159 0038 A25C     		ldrb	r2, [r4, r2]	@ zero_extendqisi2
 1160              	.LVL110:
 1161 003a D2B2     		uxtb	r2, r2
 1162              	.LVL111:
1017:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* PCLK1 clock frequency */
1018:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 1163              		.loc 1 1018 0
 1164 003c 23FA02F2 		lsr	r2, r3, r2
 1165              	.LVL112:
 1166 0040 8260     		str	r2, [r0, #8]
1019:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Get PCLK2 prescaler */
1020:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 1167              		.loc 1 1020 0
 1168 0042 4A68     		ldr	r2, [r1, #4]
 1169              	.LVL113:
1021:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   tmp = tmp >> 11;
 1170              		.loc 1 1021 0
 1171 0044 C2F3C222 		ubfx	r2, r2, #11, #3
 1172              	.LVL114:
1022:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   presc = APBAHBPrescTable[tmp];
 1173              		.loc 1 1022 0
 1174 0048 A25C     		ldrb	r2, [r4, r2]	@ zero_extendqisi2
 1175              	.LVL115:
 1176 004a D2B2     		uxtb	r2, r2
 1177              	.LVL116:
1023:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* PCLK2 clock frequency */
1024:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 1178              		.loc 1 1024 0
 1179 004c D340     		lsrs	r3, r3, r2
 1180 004e C360     		str	r3, [r0, #12]
1025:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Get ADCCLK prescaler */
1026:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 1181              		.loc 1 1026 0
 1182 0050 4A68     		ldr	r2, [r1, #4]
 1183              	.LVL117:
1027:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   tmp = tmp >> 14;
 1184              		.loc 1 1027 0
 1185 0052 C2F38132 		ubfx	r2, r2, #14, #2
 1186              	.LVL118:
1028:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   presc = ADCPrescTable[tmp];
 1187              		.loc 1 1028 0
 1188 0056 1749     		ldr	r1, .L117+12
 1189 0058 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 1190              	.LVL119:
 1191 005a D2B2     		uxtb	r2, r2
 1192              	.LVL120:
1029:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* ADCCLK clock frequency */
1030:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 1193              		.loc 1 1030 0
 1194 005c B3FBF2F3 		udiv	r3, r3, r2
 1195 0060 0361     		str	r3, [r0, #16]
1031:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** }
 1196              		.loc 1 1031 0
 1197 0062 10BC     		pop	{r4}
 1198              		.cfi_remember_state
 1199              		.cfi_restore 4
 1200              		.cfi_def_cfa_offset 0
 1201 0064 7047     		bx	lr
 1202              	.LVL121:
 1203              	.L107:
 1204              		.cfi_restore_state
 929:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****       break;
 1205              		.loc 1 929 0
 1206 0066 114B     		ldr	r3, .L117+4
 1207              	.LVL122:
 1208 0068 0360     		str	r3, [r0]
 930:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****     case 0x08:  /* PLL used as system clock */
 1209              		.loc 1 930 0
 1210 006a D8E7     		b	.L110
 1211              	.LVL123:
 1212              	.L108:
 934:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****       pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 1213              		.loc 1 934 0
 1214 006c 0E4A     		ldr	r2, .L117
 1215 006e 5368     		ldr	r3, [r2, #4]
 1216              	.LVL124:
 935:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****       
 1217              		.loc 1 935 0
 1218 0070 5268     		ldr	r2, [r2, #4]
 1219              	.LVL125:
 938:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****       
 1220              		.loc 1 938 0
 1221 0072 C3F38343 		ubfx	r3, r3, #18, #4
 1222              	.LVL126:
 1223 0076 0233     		adds	r3, r3, #2
 1224              	.LVL127:
 940:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****       {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
 1225              		.loc 1 940 0
 1226 0078 12F4803F 		tst	r2, #65536
 1227 007c 09D0     		beq	.L116
 952:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****         {/* HSE oscillator clock divided by 2 */
 1228              		.loc 1 952 0
 1229 007e 0A4A     		ldr	r2, .L117
 1230              	.LVL128:
 1231 0080 5268     		ldr	r2, [r2, #4]
 1232 0082 12F4003F 		tst	r2, #131072
 1233 0086 09D0     		beq	.L112
 954:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****         }
 1234              		.loc 1 954 0
 1235 0088 0B4A     		ldr	r2, .L117+16
 1236 008a 02FB03F3 		mul	r3, r2, r3
 1237              	.LVL129:
 1238 008e 0360     		str	r3, [r0]
 1239 0090 C5E7     		b	.L110
 1240              	.LVL130:
 1241              	.L116:
 942:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****       }
 1242              		.loc 1 942 0
 1243 0092 094A     		ldr	r2, .L117+16
 1244              	.LVL131:
 1245 0094 02FB03F3 		mul	r3, r2, r3
 1246              	.LVL132:
 1247 0098 0360     		str	r3, [r0]
 1248 009a C0E7     		b	.L110
 1249              	.LVL133:
 1250              	.L112:
 958:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****         }
 1251              		.loc 1 958 0
 1252 009c 034A     		ldr	r2, .L117+4
 1253 009e 02FB03F3 		mul	r3, r2, r3
 1254              	.LVL134:
 1255 00a2 0360     		str	r3, [r0]
 1256 00a4 BBE7     		b	.L110
 1257              	.L118:
 1258 00a6 00BF     		.align	2
 1259              	.L117:
 1260 00a8 00100240 		.word	1073876992
 1261 00ac 00127A00 		.word	8000000
 1262 00b0 00000000 		.word	.LANCHOR0
 1263 00b4 00000000 		.word	.LANCHOR1
 1264 00b8 00093D00 		.word	4000000
 1265              		.cfi_endproc
 1266              	.LFE82:
 1268              		.section	.text.RCC_AHBPeriphClockCmd,"ax",%progbits
 1269              		.align	1
 1270              		.global	RCC_AHBPeriphClockCmd
 1271              		.syntax unified
 1272              		.thumb
 1273              		.thumb_func
 1274              		.fpu softvfp
 1276              	RCC_AHBPeriphClockCmd:
 1277              	.LFB83:
1032:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
1033:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /**
1034:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @brief  Enables or disables the AHB peripheral clock.
1035:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB peripheral to gates its clock.
1036:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   
1037:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   For @b STM32_Connectivity_line_devices, this parameter can be any combination
1038:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   of the following values:        
1039:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_DMA1
1040:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_DMA2
1041:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_SRAM
1042:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_FLITF
1043:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_CRC
1044:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_OTG_FS    
1045:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_ETH_MAC   
1046:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_ETH_MAC_Tx
1047:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_ETH_MAC_Rx
1048:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * 
1049:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   For @b other_STM32_devices, this parameter can be any combination of the 
1050:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   following values:        
1051:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_DMA1
1052:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_DMA2
1053:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_SRAM
1054:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_FLITF
1055:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_CRC
1056:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_FSMC
1057:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_SDIO
1058:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   
1059:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @note SRAM and FLITF clock can be disabled only during sleep mode.
1060:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1061:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   This parameter can be: ENABLE or DISABLE.
1062:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @retval None
1063:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   */
1064:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
1065:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** {
 1278              		.loc 1 1065 0
 1279              		.cfi_startproc
 1280              		@ args = 0, pretend = 0, frame = 0
 1281              		@ frame_needed = 0, uses_anonymous_args = 0
 1282              	.LVL135:
 1283 0000 38B5     		push	{r3, r4, r5, lr}
 1284              		.cfi_def_cfa_offset 16
 1285              		.cfi_offset 3, -16
 1286              		.cfi_offset 4, -12
 1287              		.cfi_offset 5, -8
 1288              		.cfi_offset 14, -4
 1289 0002 0446     		mov	r4, r0
 1290 0004 0D46     		mov	r5, r1
1066:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Check the parameters */
1067:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
 1291              		.loc 1 1067 0
 1292 0006 20F4AA63 		bic	r3, r0, #1360
 1293 000a 23F00703 		bic	r3, r3, #7
 1294 000e 03B9     		cbnz	r3, .L120
 1295              		.loc 1 1067 0 is_stmt 0 discriminator 2
 1296 0010 20B9     		cbnz	r0, .L121
 1297              	.L120:
 1298              		.loc 1 1067 0 discriminator 3
 1299 0012 40F22B41 		movw	r1, #1067
 1300              	.LVL136:
 1301 0016 0B48     		ldr	r0, .L128
 1302              	.LVL137:
 1303 0018 FFF7FEFF 		bl	assert_failed
 1304              	.LVL138:
 1305              	.L121:
1068:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 1306              		.loc 1 1068 0 is_stmt 1
 1307 001c 012D     		cmp	r5, #1
 1308 001e 06D8     		bhi	.L126
 1309              	.L122:
1069:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
1070:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   if (NewState != DISABLE)
 1310              		.loc 1 1070 0
 1311 0020 5DB9     		cbnz	r5, .L127
1071:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   {
1072:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****     RCC->AHBENR |= RCC_AHBPeriph;
1073:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   }
1074:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   else
1075:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   {
1076:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****     RCC->AHBENR &= ~RCC_AHBPeriph;
 1312              		.loc 1 1076 0
 1313 0022 094A     		ldr	r2, .L128+4
 1314 0024 5369     		ldr	r3, [r2, #20]
 1315 0026 23EA0404 		bic	r4, r3, r4
 1316              	.LVL139:
 1317 002a 5461     		str	r4, [r2, #20]
 1318              	.L119:
1077:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   }
1078:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** }
 1319              		.loc 1 1078 0
 1320 002c 38BD     		pop	{r3, r4, r5, pc}
 1321              	.LVL140:
 1322              	.L126:
1068:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 1323              		.loc 1 1068 0 discriminator 1
 1324 002e 40F22C41 		movw	r1, #1068
 1325 0032 0448     		ldr	r0, .L128
 1326 0034 FFF7FEFF 		bl	assert_failed
 1327              	.LVL141:
 1328 0038 F2E7     		b	.L122
 1329              	.L127:
1072:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   }
 1330              		.loc 1 1072 0
 1331 003a 034A     		ldr	r2, .L128+4
 1332 003c 5369     		ldr	r3, [r2, #20]
 1333 003e 1C43     		orrs	r4, r4, r3
 1334              	.LVL142:
 1335 0040 5461     		str	r4, [r2, #20]
 1336 0042 F3E7     		b	.L119
 1337              	.L129:
 1338              		.align	2
 1339              	.L128:
 1340 0044 00000000 		.word	.LC0
 1341 0048 00100240 		.word	1073876992
 1342              		.cfi_endproc
 1343              	.LFE83:
 1345              		.section	.text.RCC_APB2PeriphClockCmd,"ax",%progbits
 1346              		.align	1
 1347              		.global	RCC_APB2PeriphClockCmd
 1348              		.syntax unified
 1349              		.thumb
 1350              		.thumb_func
 1351              		.fpu softvfp
 1353              	RCC_APB2PeriphClockCmd:
 1354              	.LFB84:
1079:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
1080:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /**
1081:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @brief  Enables or disables the High Speed APB (APB2) peripheral clock.
1082:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @param  RCC_APB2Periph: specifies the APB2 peripheral to gates its clock.
1083:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   This parameter can be any combination of the following values:
1084:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_APB2Periph_AFIO, RCC_APB2Periph_GPIOA, RCC_APB2Periph_GPIOB,
1085:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *          RCC_APB2Periph_GPIOC, RCC_APB2Periph_GPIOD, RCC_APB2Periph_GPIOE,
1086:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *          RCC_APB2Periph_GPIOF, RCC_APB2Periph_GPIOG, RCC_APB2Periph_ADC1,
1087:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *          RCC_APB2Periph_ADC2, RCC_APB2Periph_TIM1, RCC_APB2Periph_SPI1,
1088:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *          RCC_APB2Periph_TIM8, RCC_APB2Periph_USART1, RCC_APB2Periph_ADC3,
1089:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *          RCC_APB2Periph_TIM15, RCC_APB2Periph_TIM16, RCC_APB2Periph_TIM17,
1090:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *          RCC_APB2Periph_TIM9, RCC_APB2Periph_TIM10, RCC_APB2Periph_TIM11     
1091:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1092:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   This parameter can be: ENABLE or DISABLE.
1093:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @retval None
1094:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   */
1095:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
1096:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** {
 1355              		.loc 1 1096 0
 1356              		.cfi_startproc
 1357              		@ args = 0, pretend = 0, frame = 0
 1358              		@ frame_needed = 0, uses_anonymous_args = 0
 1359              	.LVL143:
 1360 0000 38B5     		push	{r3, r4, r5, lr}
 1361              		.cfi_def_cfa_offset 16
 1362              		.cfi_offset 3, -16
 1363              		.cfi_offset 4, -12
 1364              		.cfi_offset 5, -8
 1365              		.cfi_offset 14, -4
 1366 0002 0446     		mov	r4, r0
 1367 0004 0D46     		mov	r5, r1
1097:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Check the parameters */
1098:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
 1368              		.loc 1 1098 0
 1369 0006 0E4B     		ldr	r3, .L139
 1370 0008 0340     		ands	r3, r3, r0
 1371 000a 03B9     		cbnz	r3, .L131
 1372              		.loc 1 1098 0 is_stmt 0 discriminator 2
 1373 000c 20B9     		cbnz	r0, .L132
 1374              	.L131:
 1375              		.loc 1 1098 0 discriminator 3
 1376 000e 40F24A41 		movw	r1, #1098
 1377              	.LVL144:
 1378 0012 0C48     		ldr	r0, .L139+4
 1379              	.LVL145:
 1380 0014 FFF7FEFF 		bl	assert_failed
 1381              	.LVL146:
 1382              	.L132:
1099:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 1383              		.loc 1 1099 0 is_stmt 1
 1384 0018 012D     		cmp	r5, #1
 1385 001a 06D8     		bhi	.L137
 1386              	.L133:
1100:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   if (NewState != DISABLE)
 1387              		.loc 1 1100 0
 1388 001c 5DB9     		cbnz	r5, .L138
1101:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   {
1102:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****     RCC->APB2ENR |= RCC_APB2Periph;
1103:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   }
1104:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   else
1105:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   {
1106:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****     RCC->APB2ENR &= ~RCC_APB2Periph;
 1389              		.loc 1 1106 0
 1390 001e 0A4A     		ldr	r2, .L139+8
 1391 0020 9369     		ldr	r3, [r2, #24]
 1392 0022 23EA0404 		bic	r4, r3, r4
 1393              	.LVL147:
 1394 0026 9461     		str	r4, [r2, #24]
 1395              	.L130:
1107:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   }
1108:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** }
 1396              		.loc 1 1108 0
 1397 0028 38BD     		pop	{r3, r4, r5, pc}
 1398              	.LVL148:
 1399              	.L137:
1099:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   if (NewState != DISABLE)
 1400              		.loc 1 1099 0 discriminator 1
 1401 002a 40F24B41 		movw	r1, #1099
 1402 002e 0548     		ldr	r0, .L139+4
 1403 0030 FFF7FEFF 		bl	assert_failed
 1404              	.LVL149:
 1405 0034 F2E7     		b	.L133
 1406              	.L138:
1102:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   }
 1407              		.loc 1 1102 0
 1408 0036 044A     		ldr	r2, .L139+8
 1409 0038 9369     		ldr	r3, [r2, #24]
 1410 003a 1C43     		orrs	r4, r4, r3
 1411              	.LVL150:
 1412 003c 9461     		str	r4, [r2, #24]
 1413 003e F3E7     		b	.L130
 1414              	.L140:
 1415              		.align	2
 1416              	.L139:
 1417 0040 0200C0FF 		.word	-4194302
 1418 0044 00000000 		.word	.LC0
 1419 0048 00100240 		.word	1073876992
 1420              		.cfi_endproc
 1421              	.LFE84:
 1423              		.section	.text.RCC_APB1PeriphClockCmd,"ax",%progbits
 1424              		.align	1
 1425              		.global	RCC_APB1PeriphClockCmd
 1426              		.syntax unified
 1427              		.thumb
 1428              		.thumb_func
 1429              		.fpu softvfp
 1431              	RCC_APB1PeriphClockCmd:
 1432              	.LFB85:
1109:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
1110:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /**
1111:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @brief  Enables or disables the Low Speed APB (APB1) peripheral clock.
1112:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @param  RCC_APB1Periph: specifies the APB1 peripheral to gates its clock.
1113:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   This parameter can be any combination of the following values:
1114:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_APB1Periph_TIM2, RCC_APB1Periph_TIM3, RCC_APB1Periph_TIM4,
1115:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *          RCC_APB1Periph_TIM5, RCC_APB1Periph_TIM6, RCC_APB1Periph_TIM7,
1116:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *          RCC_APB1Periph_WWDG, RCC_APB1Periph_SPI2, RCC_APB1Periph_SPI3,
1117:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *          RCC_APB1Periph_USART2, RCC_APB1Periph_USART3, RCC_APB1Periph_USART4, 
1118:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *          RCC_APB1Periph_USART5, RCC_APB1Periph_I2C1, RCC_APB1Periph_I2C2,
1119:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *          RCC_APB1Periph_USB, RCC_APB1Periph_CAN1, RCC_APB1Periph_BKP,
1120:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *          RCC_APB1Periph_PWR, RCC_APB1Periph_DAC, RCC_APB1Periph_CEC,
1121:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *          RCC_APB1Periph_TIM12, RCC_APB1Periph_TIM13, RCC_APB1Periph_TIM14
1122:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1123:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   This parameter can be: ENABLE or DISABLE.
1124:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @retval None
1125:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   */
1126:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
1127:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** {
 1433              		.loc 1 1127 0
 1434              		.cfi_startproc
 1435              		@ args = 0, pretend = 0, frame = 0
 1436              		@ frame_needed = 0, uses_anonymous_args = 0
 1437              	.LVL151:
 1438 0000 38B5     		push	{r3, r4, r5, lr}
 1439              		.cfi_def_cfa_offset 16
 1440              		.cfi_offset 3, -16
 1441              		.cfi_offset 4, -12
 1442              		.cfi_offset 5, -8
 1443              		.cfi_offset 14, -4
 1444 0002 0446     		mov	r4, r0
 1445 0004 0D46     		mov	r5, r1
1128:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Check the parameters */
1129:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
 1446              		.loc 1 1129 0
 1447 0006 0E4B     		ldr	r3, .L150
 1448 0008 1842     		tst	r0, r3
 1449 000a 00D1     		bne	.L142
 1450              		.loc 1 1129 0 is_stmt 0 discriminator 2
 1451 000c 20B9     		cbnz	r0, .L143
 1452              	.L142:
 1453              		.loc 1 1129 0 discriminator 3
 1454 000e 40F26941 		movw	r1, #1129
 1455              	.LVL152:
 1456 0012 0C48     		ldr	r0, .L150+4
 1457              	.LVL153:
 1458 0014 FFF7FEFF 		bl	assert_failed
 1459              	.LVL154:
 1460              	.L143:
1130:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 1461              		.loc 1 1130 0 is_stmt 1
 1462 0018 012D     		cmp	r5, #1
 1463 001a 06D8     		bhi	.L148
 1464              	.L144:
1131:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   if (NewState != DISABLE)
 1465              		.loc 1 1131 0
 1466 001c 5DB9     		cbnz	r5, .L149
1132:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   {
1133:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****     RCC->APB1ENR |= RCC_APB1Periph;
1134:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   }
1135:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   else
1136:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   {
1137:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****     RCC->APB1ENR &= ~RCC_APB1Periph;
 1467              		.loc 1 1137 0
 1468 001e 0A4A     		ldr	r2, .L150+8
 1469 0020 D369     		ldr	r3, [r2, #28]
 1470 0022 23EA0404 		bic	r4, r3, r4
 1471              	.LVL155:
 1472 0026 D461     		str	r4, [r2, #28]
 1473              	.L141:
1138:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   }
1139:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** }
 1474              		.loc 1 1139 0
 1475 0028 38BD     		pop	{r3, r4, r5, pc}
 1476              	.LVL156:
 1477              	.L148:
1130:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   if (NewState != DISABLE)
 1478              		.loc 1 1130 0 discriminator 1
 1479 002a 40F26A41 		movw	r1, #1130
 1480 002e 0548     		ldr	r0, .L150+4
 1481 0030 FFF7FEFF 		bl	assert_failed
 1482              	.LVL157:
 1483 0034 F2E7     		b	.L144
 1484              	.L149:
1133:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   }
 1485              		.loc 1 1133 0
 1486 0036 044A     		ldr	r2, .L150+8
 1487 0038 D369     		ldr	r3, [r2, #28]
 1488 003a 1C43     		orrs	r4, r4, r3
 1489              	.LVL158:
 1490 003c D461     		str	r4, [r2, #28]
 1491 003e F3E7     		b	.L141
 1492              	.L151:
 1493              		.align	2
 1494              	.L150:
 1495 0040 00360181 		.word	-2130627072
 1496 0044 00000000 		.word	.LC0
 1497 0048 00100240 		.word	1073876992
 1498              		.cfi_endproc
 1499              	.LFE85:
 1501              		.section	.text.RCC_APB2PeriphResetCmd,"ax",%progbits
 1502              		.align	1
 1503              		.global	RCC_APB2PeriphResetCmd
 1504              		.syntax unified
 1505              		.thumb
 1506              		.thumb_func
 1507              		.fpu softvfp
 1509              	RCC_APB2PeriphResetCmd:
 1510              	.LFB86:
1140:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
1141:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #ifdef STM32F10X_CL
1142:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /**
1143:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @brief  Forces or releases AHB peripheral reset.
1144:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @note   This function applies only to STM32 Connectivity line devices.
1145:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB peripheral to reset.
1146:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   This parameter can be any combination of the following values:
1147:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_OTG_FS 
1148:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_ETH_MAC
1149:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
1150:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   This parameter can be: ENABLE or DISABLE.
1151:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @retval None
1152:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   */
1153:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** void RCC_AHBPeriphResetCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
1154:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** {
1155:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Check the parameters */
1156:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   assert_param(IS_RCC_AHB_PERIPH_RESET(RCC_AHBPeriph));
1157:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1158:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
1159:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   if (NewState != DISABLE)
1160:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   {
1161:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****     RCC->AHBRSTR |= RCC_AHBPeriph;
1162:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   }
1163:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   else
1164:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   {
1165:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****     RCC->AHBRSTR &= ~RCC_AHBPeriph;
1166:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   }
1167:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** }
1168:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */ 
1169:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
1170:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /**
1171:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @brief  Forces or releases High Speed APB (APB2) peripheral reset.
1172:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @param  RCC_APB2Periph: specifies the APB2 peripheral to reset.
1173:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   This parameter can be any combination of the following values:
1174:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_APB2Periph_AFIO, RCC_APB2Periph_GPIOA, RCC_APB2Periph_GPIOB,
1175:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *          RCC_APB2Periph_GPIOC, RCC_APB2Periph_GPIOD, RCC_APB2Periph_GPIOE,
1176:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *          RCC_APB2Periph_GPIOF, RCC_APB2Periph_GPIOG, RCC_APB2Periph_ADC1,
1177:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *          RCC_APB2Periph_ADC2, RCC_APB2Periph_TIM1, RCC_APB2Periph_SPI1,
1178:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *          RCC_APB2Periph_TIM8, RCC_APB2Periph_USART1, RCC_APB2Periph_ADC3,
1179:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *          RCC_APB2Periph_TIM15, RCC_APB2Periph_TIM16, RCC_APB2Periph_TIM17,
1180:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *          RCC_APB2Periph_TIM9, RCC_APB2Periph_TIM10, RCC_APB2Periph_TIM11  
1181:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
1182:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   This parameter can be: ENABLE or DISABLE.
1183:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @retval None
1184:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   */
1185:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
1186:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** {
 1511              		.loc 1 1186 0
 1512              		.cfi_startproc
 1513              		@ args = 0, pretend = 0, frame = 0
 1514              		@ frame_needed = 0, uses_anonymous_args = 0
 1515              	.LVL159:
 1516 0000 38B5     		push	{r3, r4, r5, lr}
 1517              		.cfi_def_cfa_offset 16
 1518              		.cfi_offset 3, -16
 1519              		.cfi_offset 4, -12
 1520              		.cfi_offset 5, -8
 1521              		.cfi_offset 14, -4
 1522 0002 0446     		mov	r4, r0
 1523 0004 0D46     		mov	r5, r1
1187:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Check the parameters */
1188:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
 1524              		.loc 1 1188 0
 1525 0006 0E4B     		ldr	r3, .L161
 1526 0008 0340     		ands	r3, r3, r0
 1527 000a 03B9     		cbnz	r3, .L153
 1528              		.loc 1 1188 0 is_stmt 0 discriminator 2
 1529 000c 20B9     		cbnz	r0, .L154
 1530              	.L153:
 1531              		.loc 1 1188 0 discriminator 3
 1532 000e 40F2A441 		movw	r1, #1188
 1533              	.LVL160:
 1534 0012 0C48     		ldr	r0, .L161+4
 1535              	.LVL161:
 1536 0014 FFF7FEFF 		bl	assert_failed
 1537              	.LVL162:
 1538              	.L154:
1189:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 1539              		.loc 1 1189 0 is_stmt 1
 1540 0018 012D     		cmp	r5, #1
 1541 001a 06D8     		bhi	.L159
 1542              	.L155:
1190:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   if (NewState != DISABLE)
 1543              		.loc 1 1190 0
 1544 001c 5DB9     		cbnz	r5, .L160
1191:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   {
1192:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****     RCC->APB2RSTR |= RCC_APB2Periph;
1193:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   }
1194:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   else
1195:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   {
1196:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****     RCC->APB2RSTR &= ~RCC_APB2Periph;
 1545              		.loc 1 1196 0
 1546 001e 0A4A     		ldr	r2, .L161+8
 1547 0020 D368     		ldr	r3, [r2, #12]
 1548 0022 23EA0404 		bic	r4, r3, r4
 1549              	.LVL163:
 1550 0026 D460     		str	r4, [r2, #12]
 1551              	.L152:
1197:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   }
1198:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** }
 1552              		.loc 1 1198 0
 1553 0028 38BD     		pop	{r3, r4, r5, pc}
 1554              	.LVL164:
 1555              	.L159:
1189:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   if (NewState != DISABLE)
 1556              		.loc 1 1189 0 discriminator 1
 1557 002a 40F2A541 		movw	r1, #1189
 1558 002e 0548     		ldr	r0, .L161+4
 1559 0030 FFF7FEFF 		bl	assert_failed
 1560              	.LVL165:
 1561 0034 F2E7     		b	.L155
 1562              	.L160:
1192:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   }
 1563              		.loc 1 1192 0
 1564 0036 044A     		ldr	r2, .L161+8
 1565 0038 D368     		ldr	r3, [r2, #12]
 1566 003a 1C43     		orrs	r4, r4, r3
 1567              	.LVL166:
 1568 003c D460     		str	r4, [r2, #12]
 1569 003e F3E7     		b	.L152
 1570              	.L162:
 1571              		.align	2
 1572              	.L161:
 1573 0040 0200C0FF 		.word	-4194302
 1574 0044 00000000 		.word	.LC0
 1575 0048 00100240 		.word	1073876992
 1576              		.cfi_endproc
 1577              	.LFE86:
 1579              		.section	.text.RCC_APB1PeriphResetCmd,"ax",%progbits
 1580              		.align	1
 1581              		.global	RCC_APB1PeriphResetCmd
 1582              		.syntax unified
 1583              		.thumb
 1584              		.thumb_func
 1585              		.fpu softvfp
 1587              	RCC_APB1PeriphResetCmd:
 1588              	.LFB87:
1199:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
1200:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /**
1201:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @brief  Forces or releases Low Speed APB (APB1) peripheral reset.
1202:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @param  RCC_APB1Periph: specifies the APB1 peripheral to reset.
1203:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   This parameter can be any combination of the following values:
1204:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_APB1Periph_TIM2, RCC_APB1Periph_TIM3, RCC_APB1Periph_TIM4,
1205:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *          RCC_APB1Periph_TIM5, RCC_APB1Periph_TIM6, RCC_APB1Periph_TIM7,
1206:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *          RCC_APB1Periph_WWDG, RCC_APB1Periph_SPI2, RCC_APB1Periph_SPI3,
1207:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *          RCC_APB1Periph_USART2, RCC_APB1Periph_USART3, RCC_APB1Periph_USART4, 
1208:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *          RCC_APB1Periph_USART5, RCC_APB1Periph_I2C1, RCC_APB1Periph_I2C2,
1209:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *          RCC_APB1Periph_USB, RCC_APB1Periph_CAN1, RCC_APB1Periph_BKP,
1210:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *          RCC_APB1Periph_PWR, RCC_APB1Periph_DAC, RCC_APB1Periph_CEC,
1211:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *          RCC_APB1Periph_TIM12, RCC_APB1Periph_TIM13, RCC_APB1Periph_TIM14  
1212:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1213:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   This parameter can be: ENABLE or DISABLE.
1214:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @retval None
1215:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   */
1216:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
1217:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** {
 1589              		.loc 1 1217 0
 1590              		.cfi_startproc
 1591              		@ args = 0, pretend = 0, frame = 0
 1592              		@ frame_needed = 0, uses_anonymous_args = 0
 1593              	.LVL167:
 1594 0000 38B5     		push	{r3, r4, r5, lr}
 1595              		.cfi_def_cfa_offset 16
 1596              		.cfi_offset 3, -16
 1597              		.cfi_offset 4, -12
 1598              		.cfi_offset 5, -8
 1599              		.cfi_offset 14, -4
 1600 0002 0446     		mov	r4, r0
 1601 0004 0D46     		mov	r5, r1
1218:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Check the parameters */
1219:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
 1602              		.loc 1 1219 0
 1603 0006 0E4B     		ldr	r3, .L172
 1604 0008 1842     		tst	r0, r3
 1605 000a 00D1     		bne	.L164
 1606              		.loc 1 1219 0 is_stmt 0 discriminator 2
 1607 000c 20B9     		cbnz	r0, .L165
 1608              	.L164:
 1609              		.loc 1 1219 0 discriminator 3
 1610 000e 40F2C341 		movw	r1, #1219
 1611              	.LVL168:
 1612 0012 0C48     		ldr	r0, .L172+4
 1613              	.LVL169:
 1614 0014 FFF7FEFF 		bl	assert_failed
 1615              	.LVL170:
 1616              	.L165:
1220:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 1617              		.loc 1 1220 0 is_stmt 1
 1618 0018 012D     		cmp	r5, #1
 1619 001a 06D8     		bhi	.L170
 1620              	.L166:
1221:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   if (NewState != DISABLE)
 1621              		.loc 1 1221 0
 1622 001c 5DB9     		cbnz	r5, .L171
1222:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   {
1223:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****     RCC->APB1RSTR |= RCC_APB1Periph;
1224:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   }
1225:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   else
1226:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   {
1227:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****     RCC->APB1RSTR &= ~RCC_APB1Periph;
 1623              		.loc 1 1227 0
 1624 001e 0A4A     		ldr	r2, .L172+8
 1625 0020 1369     		ldr	r3, [r2, #16]
 1626 0022 23EA0404 		bic	r4, r3, r4
 1627              	.LVL171:
 1628 0026 1461     		str	r4, [r2, #16]
 1629              	.L163:
1228:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   }
1229:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** }
 1630              		.loc 1 1229 0
 1631 0028 38BD     		pop	{r3, r4, r5, pc}
 1632              	.LVL172:
 1633              	.L170:
1220:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   if (NewState != DISABLE)
 1634              		.loc 1 1220 0 discriminator 1
 1635 002a 40F2C441 		movw	r1, #1220
 1636 002e 0548     		ldr	r0, .L172+4
 1637 0030 FFF7FEFF 		bl	assert_failed
 1638              	.LVL173:
 1639 0034 F2E7     		b	.L166
 1640              	.L171:
1223:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   }
 1641              		.loc 1 1223 0
 1642 0036 044A     		ldr	r2, .L172+8
 1643 0038 1369     		ldr	r3, [r2, #16]
 1644 003a 1C43     		orrs	r4, r4, r3
 1645              	.LVL174:
 1646 003c 1461     		str	r4, [r2, #16]
 1647 003e F3E7     		b	.L163
 1648              	.L173:
 1649              		.align	2
 1650              	.L172:
 1651 0040 00360181 		.word	-2130627072
 1652 0044 00000000 		.word	.LC0
 1653 0048 00100240 		.word	1073876992
 1654              		.cfi_endproc
 1655              	.LFE87:
 1657              		.section	.text.RCC_BackupResetCmd,"ax",%progbits
 1658              		.align	1
 1659              		.global	RCC_BackupResetCmd
 1660              		.syntax unified
 1661              		.thumb
 1662              		.thumb_func
 1663              		.fpu softvfp
 1665              	RCC_BackupResetCmd:
 1666              	.LFB88:
1230:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
1231:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /**
1232:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @brief  Forces or releases the Backup domain reset.
1233:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @param  NewState: new state of the Backup domain reset.
1234:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   This parameter can be: ENABLE or DISABLE.
1235:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @retval None
1236:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   */
1237:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** void RCC_BackupResetCmd(FunctionalState NewState)
1238:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** {
 1667              		.loc 1 1238 0
 1668              		.cfi_startproc
 1669              		@ args = 0, pretend = 0, frame = 0
 1670              		@ frame_needed = 0, uses_anonymous_args = 0
 1671              	.LVL175:
 1672 0000 10B5     		push	{r4, lr}
 1673              		.cfi_def_cfa_offset 8
 1674              		.cfi_offset 4, -8
 1675              		.cfi_offset 14, -4
 1676 0002 0446     		mov	r4, r0
1239:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Check the parameters */
1240:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 1677              		.loc 1 1240 0
 1678 0004 0128     		cmp	r0, #1
 1679 0006 04D9     		bls	.L175
 1680              		.loc 1 1240 0 is_stmt 0 discriminator 1
 1681 0008 4FF49B61 		mov	r1, #1240
 1682 000c 0248     		ldr	r0, .L177
 1683              	.LVL176:
 1684 000e FFF7FEFF 		bl	assert_failed
 1685              	.LVL177:
 1686              	.L175:
1241:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 1687              		.loc 1 1241 0 is_stmt 1
 1688 0012 024B     		ldr	r3, .L177+4
 1689 0014 1C60     		str	r4, [r3]
1242:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** }
 1690              		.loc 1 1242 0
 1691 0016 10BD     		pop	{r4, pc}
 1692              	.L178:
 1693              		.align	2
 1694              	.L177:
 1695 0018 00000000 		.word	.LC0
 1696 001c 40044242 		.word	1111622720
 1697              		.cfi_endproc
 1698              	.LFE88:
 1700              		.section	.text.RCC_ClockSecuritySystemCmd,"ax",%progbits
 1701              		.align	1
 1702              		.global	RCC_ClockSecuritySystemCmd
 1703              		.syntax unified
 1704              		.thumb
 1705              		.thumb_func
 1706              		.fpu softvfp
 1708              	RCC_ClockSecuritySystemCmd:
 1709              	.LFB89:
1243:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
1244:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /**
1245:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @brief  Enables or disables the Clock Security System.
1246:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @param  NewState: new state of the Clock Security System..
1247:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   This parameter can be: ENABLE or DISABLE.
1248:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @retval None
1249:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   */
1250:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
1251:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** {
 1710              		.loc 1 1251 0
 1711              		.cfi_startproc
 1712              		@ args = 0, pretend = 0, frame = 0
 1713              		@ frame_needed = 0, uses_anonymous_args = 0
 1714              	.LVL178:
 1715 0000 10B5     		push	{r4, lr}
 1716              		.cfi_def_cfa_offset 8
 1717              		.cfi_offset 4, -8
 1718              		.cfi_offset 14, -4
 1719 0002 0446     		mov	r4, r0
1252:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Check the parameters */
1253:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 1720              		.loc 1 1253 0
 1721 0004 0128     		cmp	r0, #1
 1722 0006 04D9     		bls	.L180
 1723              		.loc 1 1253 0 is_stmt 0 discriminator 1
 1724 0008 40F2E541 		movw	r1, #1253
 1725 000c 0248     		ldr	r0, .L182
 1726              	.LVL179:
 1727 000e FFF7FEFF 		bl	assert_failed
 1728              	.LVL180:
 1729              	.L180:
1254:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 1730              		.loc 1 1254 0 is_stmt 1
 1731 0012 024B     		ldr	r3, .L182+4
 1732 0014 1C60     		str	r4, [r3]
1255:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** }
 1733              		.loc 1 1255 0
 1734 0016 10BD     		pop	{r4, pc}
 1735              	.L183:
 1736              		.align	2
 1737              	.L182:
 1738 0018 00000000 		.word	.LC0
 1739 001c 4C004242 		.word	1111621708
 1740              		.cfi_endproc
 1741              	.LFE89:
 1743              		.section	.text.RCC_MCOConfig,"ax",%progbits
 1744              		.align	1
 1745              		.global	RCC_MCOConfig
 1746              		.syntax unified
 1747              		.thumb
 1748              		.thumb_func
 1749              		.fpu softvfp
 1751              	RCC_MCOConfig:
 1752              	.LFB90:
1256:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
1257:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /**
1258:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @brief  Selects the clock source to output on MCO pin.
1259:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @param  RCC_MCO: specifies the clock source to output.
1260:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   
1261:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   For @b STM32_Connectivity_line_devices, this parameter can be one of the
1262:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   following values:       
1263:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_MCO_NoClock: No clock selected
1264:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_MCO_SYSCLK: System clock selected
1265:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_MCO_HSI: HSI oscillator clock selected
1266:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_MCO_HSE: HSE oscillator clock selected
1267:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_MCO_PLLCLK_Div2: PLL clock divided by 2 selected
1268:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_MCO_PLL2CLK: PLL2 clock selected                     
1269:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_MCO_PLL3CLK_Div2: PLL3 clock divided by 2 selected   
1270:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_MCO_XT1: External 3-25 MHz oscillator clock selected  
1271:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_MCO_PLL3CLK: PLL3 clock selected 
1272:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * 
1273:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   For  @b other_STM32_devices, this parameter can be one of the following values:        
1274:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_MCO_NoClock: No clock selected
1275:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_MCO_SYSCLK: System clock selected
1276:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_MCO_HSI: HSI oscillator clock selected
1277:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_MCO_HSE: HSE oscillator clock selected
1278:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_MCO_PLLCLK_Div2: PLL clock divided by 2 selected
1279:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   
1280:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @retval None
1281:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   */
1282:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** void RCC_MCOConfig(uint8_t RCC_MCO)
1283:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** {
 1753              		.loc 1 1283 0
 1754              		.cfi_startproc
 1755              		@ args = 0, pretend = 0, frame = 0
 1756              		@ frame_needed = 0, uses_anonymous_args = 0
 1757              	.LVL181:
 1758 0000 10B5     		push	{r4, lr}
 1759              		.cfi_def_cfa_offset 8
 1760              		.cfi_offset 4, -8
 1761              		.cfi_offset 14, -4
1284:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Check the parameters */
1285:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   assert_param(IS_RCC_MCO(RCC_MCO));
 1762              		.loc 1 1285 0
 1763 0002 0446     		mov	r4, r0
 1764 0004 60B1     		cbz	r0, .L185
 1765              		.loc 1 1285 0 is_stmt 0 discriminator 1
 1766 0006 0528     		cmp	r0, #5
 1767 0008 0AD0     		beq	.L185
 1768              		.loc 1 1285 0 discriminator 2
 1769 000a 0428     		cmp	r0, #4
 1770 000c 08D0     		beq	.L185
 1771              		.loc 1 1285 0 discriminator 3
 1772 000e 0628     		cmp	r0, #6
 1773 0010 06D0     		beq	.L185
 1774              		.loc 1 1285 0 discriminator 4
 1775 0012 0728     		cmp	r0, #7
 1776 0014 04D0     		beq	.L185
 1777              		.loc 1 1285 0 discriminator 5
 1778 0016 40F20551 		movw	r1, #1285
 1779 001a 0348     		ldr	r0, .L187
 1780              	.LVL182:
 1781 001c FFF7FEFF 		bl	assert_failed
 1782              	.LVL183:
 1783              	.L185:
1286:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
1287:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Perform Byte access to MCO bits to select the MCO source */
1288:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *(__IO uint8_t *) CFGR_BYTE4_ADDRESS = RCC_MCO;
 1784              		.loc 1 1288 0 is_stmt 1
 1785 0020 024B     		ldr	r3, .L187+4
 1786 0022 1C70     		strb	r4, [r3]
1289:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** }
 1787              		.loc 1 1289 0
 1788 0024 10BD     		pop	{r4, pc}
 1789              	.L188:
 1790 0026 00BF     		.align	2
 1791              	.L187:
 1792 0028 00000000 		.word	.LC0
 1793 002c 07100240 		.word	1073876999
 1794              		.cfi_endproc
 1795              	.LFE90:
 1797              		.section	.text.RCC_GetFlagStatus,"ax",%progbits
 1798              		.align	1
 1799              		.global	RCC_GetFlagStatus
 1800              		.syntax unified
 1801              		.thumb
 1802              		.thumb_func
 1803              		.fpu softvfp
 1805              	RCC_GetFlagStatus:
 1806              	.LFB91:
1290:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
1291:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /**
1292:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @brief  Checks whether the specified RCC flag is set or not.
1293:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @param  RCC_FLAG: specifies the flag to check.
1294:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   
1295:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   For @b STM32_Connectivity_line_devices, this parameter can be one of the
1296:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   following values:
1297:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_HSIRDY: HSI oscillator clock ready
1298:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_HSERDY: HSE oscillator clock ready
1299:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_PLLRDY: PLL clock ready
1300:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_PLL2RDY: PLL2 clock ready      
1301:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_PLL3RDY: PLL3 clock ready                           
1302:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_LSERDY: LSE oscillator clock ready
1303:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_LSIRDY: LSI oscillator clock ready
1304:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_PINRST: Pin reset
1305:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_PORRST: POR/PDR reset
1306:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_SFTRST: Software reset
1307:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_IWDGRST: Independent Watchdog reset
1308:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_WWDGRST: Window Watchdog reset
1309:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_LPWRRST: Low Power reset
1310:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * 
1311:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   For @b other_STM32_devices, this parameter can be one of the following values:        
1312:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_HSIRDY: HSI oscillator clock ready
1313:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_HSERDY: HSE oscillator clock ready
1314:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_PLLRDY: PLL clock ready
1315:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_LSERDY: LSE oscillator clock ready
1316:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_LSIRDY: LSI oscillator clock ready
1317:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_PINRST: Pin reset
1318:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_PORRST: POR/PDR reset
1319:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_SFTRST: Software reset
1320:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_IWDGRST: Independent Watchdog reset
1321:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_WWDGRST: Window Watchdog reset
1322:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_LPWRRST: Low Power reset
1323:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   
1324:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @retval The new state of RCC_FLAG (SET or RESET).
1325:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   */
1326:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
1327:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** {
 1807              		.loc 1 1327 0
 1808              		.cfi_startproc
 1809              		@ args = 0, pretend = 0, frame = 0
 1810              		@ frame_needed = 0, uses_anonymous_args = 0
 1811              	.LVL184:
 1812 0000 10B5     		push	{r4, lr}
 1813              		.cfi_def_cfa_offset 8
 1814              		.cfi_offset 4, -8
 1815              		.cfi_offset 14, -4
 1816 0002 0446     		mov	r4, r0
 1817              	.LVL185:
1328:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   uint32_t tmp = 0;
1329:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   uint32_t statusreg = 0;
1330:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   FlagStatus bitstatus = RESET;
1331:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Check the parameters */
1332:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   assert_param(IS_RCC_FLAG(RCC_FLAG));
 1818              		.loc 1 1332 0
 1819 0004 2128     		cmp	r0, #33
 1820 0006 13D0     		beq	.L190
 1821              		.loc 1 1332 0 is_stmt 0 discriminator 1
 1822 0008 3128     		cmp	r0, #49
 1823 000a 11D0     		beq	.L190
 1824              		.loc 1 1332 0 discriminator 2
 1825 000c 3928     		cmp	r0, #57
 1826 000e 0FD0     		beq	.L190
 1827              		.loc 1 1332 0 discriminator 3
 1828 0010 4128     		cmp	r0, #65
 1829 0012 0DD0     		beq	.L190
 1830              		.loc 1 1332 0 discriminator 4
 1831 0014 6128     		cmp	r0, #97
 1832 0016 0BD0     		beq	.L190
 1833              		.loc 1 1332 0 discriminator 5
 1834 0018 7A28     		cmp	r0, #122
 1835 001a 09D0     		beq	.L190
 1836              		.loc 1 1332 0 discriminator 6
 1837 001c 7B28     		cmp	r0, #123
 1838 001e 07D0     		beq	.L190
 1839              		.loc 1 1332 0 discriminator 7
 1840 0020 7C28     		cmp	r0, #124
 1841 0022 05D0     		beq	.L190
 1842              		.loc 1 1332 0 discriminator 8
 1843 0024 7D28     		cmp	r0, #125
 1844 0026 03D0     		beq	.L190
 1845              		.loc 1 1332 0 discriminator 9
 1846 0028 7E28     		cmp	r0, #126
 1847 002a 01D0     		beq	.L190
 1848              		.loc 1 1332 0 discriminator 10
 1849 002c 7F28     		cmp	r0, #127
 1850 002e 0FD1     		bne	.L197
 1851              	.LVL186:
 1852              	.L190:
1333:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
1334:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Get the RCC register index */
1335:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   tmp = RCC_FLAG >> 5;
 1853              		.loc 1 1335 0 is_stmt 1
 1854 0030 6309     		lsrs	r3, r4, #5
 1855              	.LVL187:
1336:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   if (tmp == 1)               /* The flag to check is in CR register */
 1856              		.loc 1 1336 0
 1857 0032 012B     		cmp	r3, #1
 1858 0034 12D0     		beq	.L198
1337:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   {
1338:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****     statusreg = RCC->CR;
1339:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   }
1340:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   else if (tmp == 2)          /* The flag to check is in BDCR register */
 1859              		.loc 1 1340 0
 1860 0036 022B     		cmp	r3, #2
 1861 0038 13D0     		beq	.L199
1341:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   {
1342:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****     statusreg = RCC->BDCR;
1343:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   }
1344:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   else                       /* The flag to check is in CSR register */
1345:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   {
1346:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****     statusreg = RCC->CSR;
 1862              		.loc 1 1346 0
 1863 003a 0C4B     		ldr	r3, .L201
 1864              	.LVL188:
 1865 003c 5B6A     		ldr	r3, [r3, #36]
 1866              	.LVL189:
 1867              	.L192:
1347:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   }
1348:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
1349:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Get the flag position */
1350:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   tmp = RCC_FLAG & FLAG_Mask;
 1868              		.loc 1 1350 0
 1869 003e 04F01F04 		and	r4, r4, #31
 1870              	.LVL190:
1351:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 1871              		.loc 1 1351 0
 1872 0042 23FA04F4 		lsr	r4, r3, r4
 1873              	.LVL191:
 1874 0046 14F0010F 		tst	r4, #1
 1875 004a 0DD1     		bne	.L200
1352:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   {
1353:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****     bitstatus = SET;
1354:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   }
1355:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   else
1356:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   {
1357:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****     bitstatus = RESET;
 1876              		.loc 1 1357 0
 1877 004c 0020     		movs	r0, #0
 1878              	.L194:
 1879              	.LVL192:
1358:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   }
1359:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
1360:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Return the flag status */
1361:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   return bitstatus;
1362:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** }
 1880              		.loc 1 1362 0
 1881 004e 10BD     		pop	{r4, pc}
 1882              	.LVL193:
 1883              	.L197:
1332:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 1884              		.loc 1 1332 0 discriminator 11
 1885 0050 40F23451 		movw	r1, #1332
 1886 0054 0648     		ldr	r0, .L201+4
 1887              	.LVL194:
 1888 0056 FFF7FEFF 		bl	assert_failed
 1889              	.LVL195:
 1890 005a E9E7     		b	.L190
 1891              	.LVL196:
 1892              	.L198:
1338:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   }
 1893              		.loc 1 1338 0
 1894 005c 034B     		ldr	r3, .L201
 1895              	.LVL197:
 1896 005e 1B68     		ldr	r3, [r3]
 1897              	.LVL198:
 1898 0060 EDE7     		b	.L192
 1899              	.LVL199:
 1900              	.L199:
1342:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   }
 1901              		.loc 1 1342 0
 1902 0062 024B     		ldr	r3, .L201
 1903              	.LVL200:
 1904 0064 1B6A     		ldr	r3, [r3, #32]
 1905              	.LVL201:
 1906 0066 EAE7     		b	.L192
 1907              	.LVL202:
 1908              	.L200:
1353:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   }
 1909              		.loc 1 1353 0
 1910 0068 0120     		movs	r0, #1
 1911 006a F0E7     		b	.L194
 1912              	.L202:
 1913              		.align	2
 1914              	.L201:
 1915 006c 00100240 		.word	1073876992
 1916 0070 00000000 		.word	.LC0
 1917              		.cfi_endproc
 1918              	.LFE91:
 1920              		.section	.text.RCC_WaitForHSEStartUp,"ax",%progbits
 1921              		.align	1
 1922              		.global	RCC_WaitForHSEStartUp
 1923              		.syntax unified
 1924              		.thumb
 1925              		.thumb_func
 1926              		.fpu softvfp
 1928              	RCC_WaitForHSEStartUp:
 1929              	.LFB65:
 305:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   __IO uint32_t StartUpCounter = 0;
 1930              		.loc 1 305 0
 1931              		.cfi_startproc
 1932              		@ args = 0, pretend = 0, frame = 8
 1933              		@ frame_needed = 0, uses_anonymous_args = 0
 1934 0000 00B5     		push	{lr}
 1935              		.cfi_def_cfa_offset 4
 1936              		.cfi_offset 14, -4
 1937 0002 83B0     		sub	sp, sp, #12
 1938              		.cfi_def_cfa_offset 16
 306:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   ErrorStatus status = ERROR;
 1939              		.loc 1 306 0
 1940 0004 0023     		movs	r3, #0
 1941 0006 0193     		str	r3, [sp, #4]
 1942              	.LVL203:
 1943              	.L205:
 313:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****     StartUpCounter++;  
 1944              		.loc 1 313 0 discriminator 2
 1945 0008 3120     		movs	r0, #49
 1946 000a FFF7FEFF 		bl	RCC_GetFlagStatus
 1947              	.LVL204:
 314:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
 1948              		.loc 1 314 0 discriminator 2
 1949 000e 019B     		ldr	r3, [sp, #4]
 1950 0010 0133     		adds	r3, r3, #1
 1951 0012 0193     		str	r3, [sp, #4]
 315:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   
 1952              		.loc 1 315 0 discriminator 2
 1953 0014 019B     		ldr	r3, [sp, #4]
 1954 0016 B3F5A06F 		cmp	r3, #1280
 1955 001a 01D0     		beq	.L204
 315:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   
 1956              		.loc 1 315 0 is_stmt 0 discriminator 1
 1957 001c 0028     		cmp	r0, #0
 1958 001e F3D0     		beq	.L205
 1959              	.L204:
 317:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   {
 1960              		.loc 1 317 0 is_stmt 1
 1961 0020 3120     		movs	r0, #49
 1962              	.LVL205:
 1963 0022 FFF7FEFF 		bl	RCC_GetFlagStatus
 1964              	.LVL206:
 1965 0026 18B9     		cbnz	r0, .L209
 323:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   }  
 1966              		.loc 1 323 0
 1967 0028 0020     		movs	r0, #0
 1968              	.L206:
 1969              	.LVL207:
 326:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 1970              		.loc 1 326 0
 1971 002a 03B0     		add	sp, sp, #12
 1972              		.cfi_remember_state
 1973              		.cfi_def_cfa_offset 4
 1974              		@ sp needed
 1975 002c 5DF804FB 		ldr	pc, [sp], #4
 1976              	.LVL208:
 1977              	.L209:
 1978              		.cfi_restore_state
 319:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   }
 1979              		.loc 1 319 0
 1980 0030 0120     		movs	r0, #1
 1981 0032 FAE7     		b	.L206
 1982              		.cfi_endproc
 1983              	.LFE65:
 1985              		.section	.text.RCC_ClearFlag,"ax",%progbits
 1986              		.align	1
 1987              		.global	RCC_ClearFlag
 1988              		.syntax unified
 1989              		.thumb
 1990              		.thumb_func
 1991              		.fpu softvfp
 1993              	RCC_ClearFlag:
 1994              	.LFB92:
1363:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
1364:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /**
1365:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @brief  Clears the RCC reset flags.
1366:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @note   The reset flags are: RCC_FLAG_PINRST, RCC_FLAG_PORRST, RCC_FLAG_SFTRST,
1367:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
1368:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @param  None
1369:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @retval None
1370:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   */
1371:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** void RCC_ClearFlag(void)
1372:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** {
 1995              		.loc 1 1372 0
 1996              		.cfi_startproc
 1997              		@ args = 0, pretend = 0, frame = 0
 1998              		@ frame_needed = 0, uses_anonymous_args = 0
 1999              		@ link register save eliminated.
1373:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Set RMVF bit to clear the reset flags */
1374:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   RCC->CSR |= CSR_RMVF_Set;
 2000              		.loc 1 1374 0
 2001 0000 024A     		ldr	r2, .L211
 2002 0002 536A     		ldr	r3, [r2, #36]
 2003 0004 43F08073 		orr	r3, r3, #16777216
 2004 0008 5362     		str	r3, [r2, #36]
1375:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** }
 2005              		.loc 1 1375 0
 2006 000a 7047     		bx	lr
 2007              	.L212:
 2008              		.align	2
 2009              	.L211:
 2010 000c 00100240 		.word	1073876992
 2011              		.cfi_endproc
 2012              	.LFE92:
 2014              		.section	.text.RCC_GetITStatus,"ax",%progbits
 2015              		.align	1
 2016              		.global	RCC_GetITStatus
 2017              		.syntax unified
 2018              		.thumb
 2019              		.thumb_func
 2020              		.fpu softvfp
 2022              	RCC_GetITStatus:
 2023              	.LFB93:
1376:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
1377:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /**
1378:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @brief  Checks whether the specified RCC interrupt has occurred or not.
1379:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @param  RCC_IT: specifies the RCC interrupt source to check.
1380:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   
1381:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   For @b STM32_Connectivity_line_devices, this parameter can be one of the
1382:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   following values:
1383:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSIRDY: LSI ready interrupt
1384:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSERDY: LSE ready interrupt
1385:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSIRDY: HSI ready interrupt
1386:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSERDY: HSE ready interrupt
1387:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLLRDY: PLL ready interrupt
1388:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLL2RDY: PLL2 ready interrupt 
1389:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLL3RDY: PLL3 ready interrupt                      
1390:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_IT_CSS: Clock Security System interrupt
1391:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * 
1392:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   For @b other_STM32_devices, this parameter can be one of the following values:        
1393:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSIRDY: LSI ready interrupt
1394:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSERDY: LSE ready interrupt
1395:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSIRDY: HSI ready interrupt
1396:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSERDY: HSE ready interrupt
1397:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLLRDY: PLL ready interrupt
1398:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_IT_CSS: Clock Security System interrupt
1399:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   
1400:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @retval The new state of RCC_IT (SET or RESET).
1401:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   */
1402:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** ITStatus RCC_GetITStatus(uint8_t RCC_IT)
1403:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** {
 2024              		.loc 1 1403 0
 2025              		.cfi_startproc
 2026              		@ args = 0, pretend = 0, frame = 0
 2027              		@ frame_needed = 0, uses_anonymous_args = 0
 2028              	.LVL209:
 2029 0000 10B5     		push	{r4, lr}
 2030              		.cfi_def_cfa_offset 8
 2031              		.cfi_offset 4, -8
 2032              		.cfi_offset 14, -4
 2033 0002 0446     		mov	r4, r0
 2034              	.LVL210:
1404:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   ITStatus bitstatus = RESET;
1405:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Check the parameters */
1406:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   assert_param(IS_RCC_GET_IT(RCC_IT));
 2035              		.loc 1 1406 0
 2036 0004 431E     		subs	r3, r0, #1
 2037 0006 DBB2     		uxtb	r3, r3
 2038 0008 012B     		cmp	r3, #1
 2039 000a 07D9     		bls	.L214
 2040              		.loc 1 1406 0 is_stmt 0 discriminator 1
 2041 000c 0428     		cmp	r0, #4
 2042 000e 05D0     		beq	.L214
 2043              		.loc 1 1406 0 discriminator 2
 2044 0010 0828     		cmp	r0, #8
 2045 0012 03D0     		beq	.L214
 2046              		.loc 1 1406 0 discriminator 3
 2047 0014 1028     		cmp	r0, #16
 2048 0016 01D0     		beq	.L214
 2049              		.loc 1 1406 0 discriminator 4
 2050 0018 8028     		cmp	r0, #128
 2051 001a 05D1     		bne	.L218
 2052              	.LVL211:
 2053              	.L214:
1407:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
1408:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Check the status of the specified RCC interrupt */
1409:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 2054              		.loc 1 1409 0 is_stmt 1
 2055 001c 064B     		ldr	r3, .L220
 2056 001e 9B68     		ldr	r3, [r3, #8]
 2057 0020 1C42     		tst	r4, r3
 2058 0022 07D1     		bne	.L219
1410:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   {
1411:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****     bitstatus = SET;
1412:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   }
1413:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   else
1414:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   {
1415:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****     bitstatus = RESET;
 2059              		.loc 1 1415 0
 2060 0024 0020     		movs	r0, #0
 2061              	.L215:
 2062              	.LVL212:
1416:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   }
1417:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
1418:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Return the RCC_IT status */
1419:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   return  bitstatus;
1420:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** }
 2063              		.loc 1 1420 0
 2064 0026 10BD     		pop	{r4, pc}
 2065              	.LVL213:
 2066              	.L218:
1406:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 2067              		.loc 1 1406 0 discriminator 5
 2068 0028 40F27E51 		movw	r1, #1406
 2069 002c 0348     		ldr	r0, .L220+4
 2070              	.LVL214:
 2071 002e FFF7FEFF 		bl	assert_failed
 2072              	.LVL215:
 2073 0032 F3E7     		b	.L214
 2074              	.L219:
1411:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   }
 2075              		.loc 1 1411 0
 2076 0034 0120     		movs	r0, #1
 2077 0036 F6E7     		b	.L215
 2078              	.L221:
 2079              		.align	2
 2080              	.L220:
 2081 0038 00100240 		.word	1073876992
 2082 003c 00000000 		.word	.LC0
 2083              		.cfi_endproc
 2084              	.LFE93:
 2086              		.section	.text.RCC_ClearITPendingBit,"ax",%progbits
 2087              		.align	1
 2088              		.global	RCC_ClearITPendingBit
 2089              		.syntax unified
 2090              		.thumb
 2091              		.thumb_func
 2092              		.fpu softvfp
 2094              	RCC_ClearITPendingBit:
 2095              	.LFB94:
1421:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
1422:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /**
1423:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @brief  Clears the RCC's interrupt pending bits.
1424:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @param  RCC_IT: specifies the interrupt pending bit to clear.
1425:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   
1426:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   For @b STM32_Connectivity_line_devices, this parameter can be any combination
1427:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   of the following values:
1428:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSIRDY: LSI ready interrupt
1429:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSERDY: LSE ready interrupt
1430:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSIRDY: HSI ready interrupt
1431:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSERDY: HSE ready interrupt
1432:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLLRDY: PLL ready interrupt
1433:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLL2RDY: PLL2 ready interrupt 
1434:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLL3RDY: PLL3 ready interrupt                      
1435:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_IT_CSS: Clock Security System interrupt
1436:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * 
1437:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   For @b other_STM32_devices, this parameter can be any combination of the
1438:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   following values:        
1439:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSIRDY: LSI ready interrupt
1440:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSERDY: LSE ready interrupt
1441:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSIRDY: HSI ready interrupt
1442:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSERDY: HSE ready interrupt
1443:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLLRDY: PLL ready interrupt
1444:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   
1445:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_IT_CSS: Clock Security System interrupt
1446:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @retval None
1447:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   */
1448:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** void RCC_ClearITPendingBit(uint8_t RCC_IT)
1449:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** {
 2096              		.loc 1 1449 0
 2097              		.cfi_startproc
 2098              		@ args = 0, pretend = 0, frame = 0
 2099              		@ frame_needed = 0, uses_anonymous_args = 0
 2100              	.LVL216:
 2101 0000 10B5     		push	{r4, lr}
 2102              		.cfi_def_cfa_offset 8
 2103              		.cfi_offset 4, -8
 2104              		.cfi_offset 14, -4
 2105 0002 0446     		mov	r4, r0
1450:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Check the parameters */
1451:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   assert_param(IS_RCC_CLEAR_IT(RCC_IT));
 2106              		.loc 1 1451 0
 2107 0004 10F0600F 		tst	r0, #96
 2108 0008 00D1     		bne	.L223
 2109              		.loc 1 1451 0 is_stmt 0 discriminator 2
 2110 000a 20B9     		cbnz	r0, .L224
 2111              	.L223:
 2112              		.loc 1 1451 0 discriminator 3
 2113 000c 40F2AB51 		movw	r1, #1451
 2114 0010 0248     		ldr	r0, .L226
 2115              	.LVL217:
 2116 0012 FFF7FEFF 		bl	assert_failed
 2117              	.LVL218:
 2118              	.L224:
1452:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
1453:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
1454:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****      pending bits */
1455:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 2119              		.loc 1 1455 0 is_stmt 1
 2120 0016 024B     		ldr	r3, .L226+4
 2121 0018 1C70     		strb	r4, [r3]
1456:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** }
 2122              		.loc 1 1456 0
 2123 001a 10BD     		pop	{r4, pc}
 2124              	.L227:
 2125              		.align	2
 2126              	.L226:
 2127 001c 00000000 		.word	.LC0
 2128 0020 0A100240 		.word	1073877002
 2129              		.cfi_endproc
 2130              	.LFE94:
 2132              		.section	.data.ADCPrescTable,"aw",%progbits
 2133              		.align	2
 2134              		.set	.LANCHOR1,. + 0
 2137              	ADCPrescTable:
 2138 0000 02       		.byte	2
 2139 0001 04       		.byte	4
 2140 0002 06       		.byte	6
 2141 0003 08       		.byte	8
 2142              		.section	.data.APBAHBPrescTable,"aw",%progbits
 2143              		.align	2
 2144              		.set	.LANCHOR0,. + 0
 2147              	APBAHBPrescTable:
 2148 0000 00       		.byte	0
 2149 0001 00       		.byte	0
 2150 0002 00       		.byte	0
 2151 0003 00       		.byte	0
 2152 0004 01       		.byte	1
 2153 0005 02       		.byte	2
 2154 0006 03       		.byte	3
 2155 0007 04       		.byte	4
 2156 0008 01       		.byte	1
 2157 0009 02       		.byte	2
 2158 000a 03       		.byte	3
 2159 000b 04       		.byte	4
 2160 000c 06       		.byte	6
 2161 000d 07       		.byte	7
 2162 000e 08       		.byte	8
 2163 000f 09       		.byte	9
 2164              		.section	.rodata.RCC_HSEConfig.str1.4,"aMS",%progbits,1
 2165              		.align	2
 2166              	.LC0:
 2167 0000 2E2E2F73 		.ascii	"../system/src/stm32f1-stdperiph/stm32f10x_rcc.c\000"
 2167      79737465 
 2167      6D2F7372 
 2167      632F7374 
 2167      6D333266 
 2168              		.text
 2169              	.Letext0:
 2170              		.file 2 "c:\\avr_arm\\winarm\\armgcc\\lib\\gcc\\arm-none-eabi\\7.2.1\\include\\stdint-gcc.h"
 2171              		.file 3 "../system/include/cmsis/core_cm3.h"
 2172              		.file 4 "../system/include/cmsis/system_stm32f10x.h"
 2173              		.file 5 "../system/include/cmsis/stm32f10x.h"
 2174              		.file 6 "../system/include/stm32f1-stdperiph/stm32f10x_rcc.h"
 2175              		.file 7 "../include/stm32f10x_conf.h"
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f10x_rcc.c
C:\Users\george\AppData\Local\Temp\cc7IkXDd.s:16     .text.RCC_DeInit:00000000 $t
C:\Users\george\AppData\Local\Temp\cc7IkXDd.s:23     .text.RCC_DeInit:00000000 RCC_DeInit
C:\Users\george\AppData\Local\Temp\cc7IkXDd.s:62     .text.RCC_DeInit:00000038 $d
C:\Users\george\AppData\Local\Temp\cc7IkXDd.s:68     .text.RCC_HSEConfig:00000000 $t
C:\Users\george\AppData\Local\Temp\cc7IkXDd.s:75     .text.RCC_HSEConfig:00000000 RCC_HSEConfig
C:\Users\george\AppData\Local\Temp\cc7IkXDd.s:142    .text.RCC_HSEConfig:00000058 $d
C:\Users\george\AppData\Local\Temp\cc7IkXDd.s:148    .text.RCC_AdjustHSICalibrationValue:00000000 $t
C:\Users\george\AppData\Local\Temp\cc7IkXDd.s:155    .text.RCC_AdjustHSICalibrationValue:00000000 RCC_AdjustHSICalibrationValue
C:\Users\george\AppData\Local\Temp\cc7IkXDd.s:199    .text.RCC_AdjustHSICalibrationValue:00000024 $d
C:\Users\george\AppData\Local\Temp\cc7IkXDd.s:205    .text.RCC_HSICmd:00000000 $t
C:\Users\george\AppData\Local\Temp\cc7IkXDd.s:212    .text.RCC_HSICmd:00000000 RCC_HSICmd
C:\Users\george\AppData\Local\Temp\cc7IkXDd.s:242    .text.RCC_HSICmd:00000018 $d
C:\Users\george\AppData\Local\Temp\cc7IkXDd.s:248    .text.RCC_PLLConfig:00000000 $t
C:\Users\george\AppData\Local\Temp\cc7IkXDd.s:255    .text.RCC_PLLConfig:00000000 RCC_PLLConfig
C:\Users\george\AppData\Local\Temp\cc7IkXDd.s:360    .text.RCC_PLLConfig:00000090 $d
C:\Users\george\AppData\Local\Temp\cc7IkXDd.s:366    .text.RCC_PLLCmd:00000000 $t
C:\Users\george\AppData\Local\Temp\cc7IkXDd.s:373    .text.RCC_PLLCmd:00000000 RCC_PLLCmd
C:\Users\george\AppData\Local\Temp\cc7IkXDd.s:403    .text.RCC_PLLCmd:00000018 $d
C:\Users\george\AppData\Local\Temp\cc7IkXDd.s:409    .text.RCC_SYSCLKConfig:00000000 $t
C:\Users\george\AppData\Local\Temp\cc7IkXDd.s:416    .text.RCC_SYSCLKConfig:00000000 RCC_SYSCLKConfig
C:\Users\george\AppData\Local\Temp\cc7IkXDd.s:460    .text.RCC_SYSCLKConfig:00000024 $d
C:\Users\george\AppData\Local\Temp\cc7IkXDd.s:466    .text.RCC_GetSYSCLKSource:00000000 $t
C:\Users\george\AppData\Local\Temp\cc7IkXDd.s:473    .text.RCC_GetSYSCLKSource:00000000 RCC_GetSYSCLKSource
C:\Users\george\AppData\Local\Temp\cc7IkXDd.s:489    .text.RCC_GetSYSCLKSource:0000000c $d
C:\Users\george\AppData\Local\Temp\cc7IkXDd.s:494    .text.RCC_HCLKConfig:00000000 $t
C:\Users\george\AppData\Local\Temp\cc7IkXDd.s:501    .text.RCC_HCLKConfig:00000000 RCC_HCLKConfig
C:\Users\george\AppData\Local\Temp\cc7IkXDd.s:565    .text.RCC_HCLKConfig:00000040 $d
C:\Users\george\AppData\Local\Temp\cc7IkXDd.s:571    .text.RCC_PCLK1Config:00000000 $t
C:\Users\george\AppData\Local\Temp\cc7IkXDd.s:578    .text.RCC_PCLK1Config:00000000 RCC_PCLK1Config
C:\Users\george\AppData\Local\Temp\cc7IkXDd.s:630    .text.RCC_PCLK1Config:00000038 $d
C:\Users\george\AppData\Local\Temp\cc7IkXDd.s:636    .text.RCC_PCLK2Config:00000000 $t
C:\Users\george\AppData\Local\Temp\cc7IkXDd.s:643    .text.RCC_PCLK2Config:00000000 RCC_PCLK2Config
C:\Users\george\AppData\Local\Temp\cc7IkXDd.s:695    .text.RCC_PCLK2Config:00000038 $d
C:\Users\george\AppData\Local\Temp\cc7IkXDd.s:701    .text.RCC_ITConfig:00000000 $t
C:\Users\george\AppData\Local\Temp\cc7IkXDd.s:708    .text.RCC_ITConfig:00000000 RCC_ITConfig
C:\Users\george\AppData\Local\Temp\cc7IkXDd.s:768    .text.RCC_ITConfig:00000040 $d
C:\Users\george\AppData\Local\Temp\cc7IkXDd.s:774    .text.RCC_USBCLKConfig:00000000 $t
C:\Users\george\AppData\Local\Temp\cc7IkXDd.s:781    .text.RCC_USBCLKConfig:00000000 RCC_USBCLKConfig
C:\Users\george\AppData\Local\Temp\cc7IkXDd.s:812    .text.RCC_USBCLKConfig:00000018 $d
C:\Users\george\AppData\Local\Temp\cc7IkXDd.s:818    .text.RCC_ADCCLKConfig:00000000 $t
C:\Users\george\AppData\Local\Temp\cc7IkXDd.s:825    .text.RCC_ADCCLKConfig:00000000 RCC_ADCCLKConfig
C:\Users\george\AppData\Local\Temp\cc7IkXDd.s:874    .text.RCC_ADCCLKConfig:00000030 $d
C:\Users\george\AppData\Local\Temp\cc7IkXDd.s:880    .text.RCC_LSEConfig:00000000 $t
C:\Users\george\AppData\Local\Temp\cc7IkXDd.s:887    .text.RCC_LSEConfig:00000000 RCC_LSEConfig
C:\Users\george\AppData\Local\Temp\cc7IkXDd.s:947    .text.RCC_LSEConfig:0000003c $d
C:\Users\george\AppData\Local\Temp\cc7IkXDd.s:953    .text.RCC_LSICmd:00000000 $t
C:\Users\george\AppData\Local\Temp\cc7IkXDd.s:960    .text.RCC_LSICmd:00000000 RCC_LSICmd
C:\Users\george\AppData\Local\Temp\cc7IkXDd.s:990    .text.RCC_LSICmd:00000018 $d
C:\Users\george\AppData\Local\Temp\cc7IkXDd.s:996    .text.RCC_RTCCLKConfig:00000000 $t
C:\Users\george\AppData\Local\Temp\cc7IkXDd.s:1003   .text.RCC_RTCCLKConfig:00000000 RCC_RTCCLKConfig
C:\Users\george\AppData\Local\Temp\cc7IkXDd.s:1042   .text.RCC_RTCCLKConfig:0000002c $d
C:\Users\george\AppData\Local\Temp\cc7IkXDd.s:1048   .text.RCC_RTCCLKCmd:00000000 $t
C:\Users\george\AppData\Local\Temp\cc7IkXDd.s:1055   .text.RCC_RTCCLKCmd:00000000 RCC_RTCCLKCmd
C:\Users\george\AppData\Local\Temp\cc7IkXDd.s:1085   .text.RCC_RTCCLKCmd:00000018 $d
C:\Users\george\AppData\Local\Temp\cc7IkXDd.s:1091   .text.RCC_GetClocksFreq:00000000 $t
C:\Users\george\AppData\Local\Temp\cc7IkXDd.s:1098   .text.RCC_GetClocksFreq:00000000 RCC_GetClocksFreq
C:\Users\george\AppData\Local\Temp\cc7IkXDd.s:1260   .text.RCC_GetClocksFreq:000000a8 $d
C:\Users\george\AppData\Local\Temp\cc7IkXDd.s:1269   .text.RCC_AHBPeriphClockCmd:00000000 $t
C:\Users\george\AppData\Local\Temp\cc7IkXDd.s:1276   .text.RCC_AHBPeriphClockCmd:00000000 RCC_AHBPeriphClockCmd
C:\Users\george\AppData\Local\Temp\cc7IkXDd.s:1340   .text.RCC_AHBPeriphClockCmd:00000044 $d
C:\Users\george\AppData\Local\Temp\cc7IkXDd.s:1346   .text.RCC_APB2PeriphClockCmd:00000000 $t
C:\Users\george\AppData\Local\Temp\cc7IkXDd.s:1353   .text.RCC_APB2PeriphClockCmd:00000000 RCC_APB2PeriphClockCmd
C:\Users\george\AppData\Local\Temp\cc7IkXDd.s:1417   .text.RCC_APB2PeriphClockCmd:00000040 $d
C:\Users\george\AppData\Local\Temp\cc7IkXDd.s:1424   .text.RCC_APB1PeriphClockCmd:00000000 $t
C:\Users\george\AppData\Local\Temp\cc7IkXDd.s:1431   .text.RCC_APB1PeriphClockCmd:00000000 RCC_APB1PeriphClockCmd
C:\Users\george\AppData\Local\Temp\cc7IkXDd.s:1495   .text.RCC_APB1PeriphClockCmd:00000040 $d
C:\Users\george\AppData\Local\Temp\cc7IkXDd.s:1502   .text.RCC_APB2PeriphResetCmd:00000000 $t
C:\Users\george\AppData\Local\Temp\cc7IkXDd.s:1509   .text.RCC_APB2PeriphResetCmd:00000000 RCC_APB2PeriphResetCmd
C:\Users\george\AppData\Local\Temp\cc7IkXDd.s:1573   .text.RCC_APB2PeriphResetCmd:00000040 $d
C:\Users\george\AppData\Local\Temp\cc7IkXDd.s:1580   .text.RCC_APB1PeriphResetCmd:00000000 $t
C:\Users\george\AppData\Local\Temp\cc7IkXDd.s:1587   .text.RCC_APB1PeriphResetCmd:00000000 RCC_APB1PeriphResetCmd
C:\Users\george\AppData\Local\Temp\cc7IkXDd.s:1651   .text.RCC_APB1PeriphResetCmd:00000040 $d
C:\Users\george\AppData\Local\Temp\cc7IkXDd.s:1658   .text.RCC_BackupResetCmd:00000000 $t
C:\Users\george\AppData\Local\Temp\cc7IkXDd.s:1665   .text.RCC_BackupResetCmd:00000000 RCC_BackupResetCmd
C:\Users\george\AppData\Local\Temp\cc7IkXDd.s:1695   .text.RCC_BackupResetCmd:00000018 $d
C:\Users\george\AppData\Local\Temp\cc7IkXDd.s:1701   .text.RCC_ClockSecuritySystemCmd:00000000 $t
C:\Users\george\AppData\Local\Temp\cc7IkXDd.s:1708   .text.RCC_ClockSecuritySystemCmd:00000000 RCC_ClockSecuritySystemCmd
C:\Users\george\AppData\Local\Temp\cc7IkXDd.s:1738   .text.RCC_ClockSecuritySystemCmd:00000018 $d
C:\Users\george\AppData\Local\Temp\cc7IkXDd.s:1744   .text.RCC_MCOConfig:00000000 $t
C:\Users\george\AppData\Local\Temp\cc7IkXDd.s:1751   .text.RCC_MCOConfig:00000000 RCC_MCOConfig
C:\Users\george\AppData\Local\Temp\cc7IkXDd.s:1792   .text.RCC_MCOConfig:00000028 $d
C:\Users\george\AppData\Local\Temp\cc7IkXDd.s:1798   .text.RCC_GetFlagStatus:00000000 $t
C:\Users\george\AppData\Local\Temp\cc7IkXDd.s:1805   .text.RCC_GetFlagStatus:00000000 RCC_GetFlagStatus
C:\Users\george\AppData\Local\Temp\cc7IkXDd.s:1915   .text.RCC_GetFlagStatus:0000006c $d
C:\Users\george\AppData\Local\Temp\cc7IkXDd.s:1921   .text.RCC_WaitForHSEStartUp:00000000 $t
C:\Users\george\AppData\Local\Temp\cc7IkXDd.s:1928   .text.RCC_WaitForHSEStartUp:00000000 RCC_WaitForHSEStartUp
C:\Users\george\AppData\Local\Temp\cc7IkXDd.s:1986   .text.RCC_ClearFlag:00000000 $t
C:\Users\george\AppData\Local\Temp\cc7IkXDd.s:1993   .text.RCC_ClearFlag:00000000 RCC_ClearFlag
C:\Users\george\AppData\Local\Temp\cc7IkXDd.s:2010   .text.RCC_ClearFlag:0000000c $d
C:\Users\george\AppData\Local\Temp\cc7IkXDd.s:2015   .text.RCC_GetITStatus:00000000 $t
C:\Users\george\AppData\Local\Temp\cc7IkXDd.s:2022   .text.RCC_GetITStatus:00000000 RCC_GetITStatus
C:\Users\george\AppData\Local\Temp\cc7IkXDd.s:2081   .text.RCC_GetITStatus:00000038 $d
C:\Users\george\AppData\Local\Temp\cc7IkXDd.s:2087   .text.RCC_ClearITPendingBit:00000000 $t
C:\Users\george\AppData\Local\Temp\cc7IkXDd.s:2094   .text.RCC_ClearITPendingBit:00000000 RCC_ClearITPendingBit
C:\Users\george\AppData\Local\Temp\cc7IkXDd.s:2127   .text.RCC_ClearITPendingBit:0000001c $d
C:\Users\george\AppData\Local\Temp\cc7IkXDd.s:2133   .data.ADCPrescTable:00000000 $d
C:\Users\george\AppData\Local\Temp\cc7IkXDd.s:2137   .data.ADCPrescTable:00000000 ADCPrescTable
C:\Users\george\AppData\Local\Temp\cc7IkXDd.s:2143   .data.APBAHBPrescTable:00000000 $d
C:\Users\george\AppData\Local\Temp\cc7IkXDd.s:2147   .data.APBAHBPrescTable:00000000 APBAHBPrescTable
C:\Users\george\AppData\Local\Temp\cc7IkXDd.s:2165   .rodata.RCC_HSEConfig.str1.4:00000000 $d
                           .group:00000000 wm4.0.c450a18b2a29049e2cbb4137d58ca9b1
                           .group:00000000 wm4.stm32f10x.h.51.c58ea26c5150470d52680f0bbaa7049c
                           .group:00000000 wm4.stdintgcc.h.29.6d480f4ba0f60596e88234283d42444f
                           .group:00000000 wm4.core_cm3.h.82.57a0f9dd004efa579f86574376281d2f
                           .group:00000000 wm4.cmsis_gcc.h.36.67d2dcde6a14ff518eedc1d545d89a76
                           .group:00000000 wm4.core_cm3.h.183.ecfd9c316d6f10b73648f6e579b02c8b
                           .group:00000000 wm4.stm32f10x.h.522.9a9f642c8c562acb4a63ad5d933b7c01
                           .group:00000000 wm4.stm32f10x_adc.h.89.9f2b285fa0070185d48a05b61a05798c
                           .group:00000000 wm4.stm32f10x_bkp.h.25.4622919f1e30efdad5eb44e12edd5513
                           .group:00000000 wm4.stm32f10x_can.h.25.e5e43f6bbc8fc7c8aa30ef2bc5610ced
                           .group:00000000 wm4.stm32f10x_cec.h.25.8f03450e7bbb704d96e7bc73ec0f66a7
                           .group:00000000 wm4.stm32f10x_dac.h.25.6e7f2924f39c60c10815105b99b8b446
                           .group:00000000 wm4.stm32f10x_dbgmcu.h.25.d3351200fc7f9c8615d1ae81d40db08a
                           .group:00000000 wm4.stm32f10x_dma.h.25.94e36204daa98cae5dcc70a10a9694d5
                           .group:00000000 wm4.stm32f10x_exti.h.25.f52c69aad7d1994be5b2c4e2b8f4c595
                           .group:00000000 wm4.stm32f10x_flash.h.25.4be61fcb02863962a1e006449d310650
                           .group:00000000 wm4.stm32f10x_fsmc.h.25.bca154da2699cdb6024c0c6c4fc5aa89
                           .group:00000000 wm4.stm32f10x_gpio.h.25.80c981af0e637567395034c576cfb3ce
                           .group:00000000 wm4.stm32f10x_i2c.h.25.b124ac2c620f8ebddd92b6d95ca62176
                           .group:00000000 wm4.stm32f10x_iwdg.h.25.da9374ab9856795610487f312ccf3122
                           .group:00000000 wm4.stm32f10x_pwr.h.25.37ef75009f751ef5fe27910e0bf00a62
                           .group:00000000 wm4.stm32f10x_rtc.h.25.361142606ba98ddcd10369f321f6e636
                           .group:00000000 wm4.stm32f10x_sdio.h.25.fb0db079f5c1412c40f359319f7c40b0
                           .group:00000000 wm4.stm32f10x_spi.h.25.3f6dfa4abe177efb3c6f5a717c06b323
                           .group:00000000 wm4.stm32f10x_tim.h.25.f709106ba77b314e6b070693f89f3c56
                           .group:00000000 wm4.stm32f10x_usart.h.25.2e65e396239d0cc41fd0bf6faa2a32cb
                           .group:00000000 wm4.stm32f10x_wwdg.h.25.dde12201d86b5aa9ecaafb5eccdc6549
                           .group:00000000 wm4.misc.h.25.068e106f368fa5369a681ef57c106f4b
                           .group:00000000 wm4.stm32f10x.h.8317.9a8e476d96d33bb2df9a9ad0775bd4a7
                           .group:00000000 wm4.stm32f10x_rcc.h.67.ea76b3a7b933ef5047bd011075f6e3a9

UNDEFINED SYMBOLS
assert_failed
